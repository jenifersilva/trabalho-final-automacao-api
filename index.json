{
  "stats": {
    "suites": 6,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T17:55:10.674Z",
    "end": "2025-09-19T17:55:10.931Z",
    "duration": 257,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "43cc43f8-a8b1-4875-892e-7546d49a7113",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "771ff30e-0faa-43b7-8036-5e9c9b9b74d9",
          "title": "Expense External - GraphQL",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
          "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense External - GraphQL\"",
              "fullTitle": "Expense External - GraphQL \"before all\" hook in \"Expense External - GraphQL\"",
              "timedOut": false,
              "duration": 60,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(loginRequest);\ntoken = response.body.data.login.token;",
              "err": {},
              "uuid": "c00ffb6f-6b30-4232-a9ba-a2a32fb0cc5a",
              "parentUUID": "771ff30e-0faa-43b7-8036-5e9c9b9b74d9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e2763b20-0de0-4ad3-88e3-8b1a0f8ab530",
              "title": "addExpense Mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e8ab421d-73db-4a27-8467-c338ac935632",
                  "parentUUID": "e2763b20-0de0-4ad3-88e3-8b1a0f8ab530",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "56ad556d-c166-4449-9d2a-ee8472482575",
                  "parentUUID": "e2763b20-0de0-4ad3-88e3-8b1a0f8ab530",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "040c8de2-6739-4610-8cf8-722fdd523f79",
                  "parentUUID": "e2763b20-0de0-4ad3-88e3-8b1a0f8ab530",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(createExpenseRequest);\nexpect(response.body.errors[0].message).to.equal(\"Not authenticated\");",
                  "err": {},
                  "uuid": "e5094270-73c0-4f96-92a1-75ebe2825c3d",
                  "parentUUID": "e2763b20-0de0-4ad3-88e3-8b1a0f8ab530",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(createExpenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body.data.addExpense)\n  .excluding([\"date\", \"id\"])\n  .to.deep.equal(expectedResponse.data.addExpense);\nexpenseId = response.body.data.addExpense.id;",
                  "err": {},
                  "uuid": "7422c8ad-0a33-4be3-b59c-42bc4235027b",
                  "parentUUID": "e2763b20-0de0-4ad3-88e3-8b1a0f8ab530",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8ab421d-73db-4a27-8467-c338ac935632",
                "56ad556d-c166-4449-9d2a-ee8472482575",
                "040c8de2-6739-4610-8cf8-722fdd523f79",
                "e5094270-73c0-4f96-92a1-75ebe2825c3d",
                "7422c8ad-0a33-4be3-b59c-42bc4235027b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2067aa4a-9e4e-4194-bd6a-9286c1dba7df",
              "title": "editExpense mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c879b4ff-9c87-463b-be16-367d04fb214b",
                  "parentUUID": "2067aa4a-9e4e-4194-bd6a-9286c1dba7df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e2311ccb-c673-4192-ab7a-3cbcf3d8126b",
                  "parentUUID": "2067aa4a-9e4e-4194-bd6a-9286c1dba7df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "929eb06b-a612-43b5-a065-84b0a7fd89b3",
                  "parentUUID": "2067aa4a-9e4e-4194-bd6a-9286c1dba7df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "f2d62c82-559d-4c5e-9906-80752175c894",
                  "parentUUID": "2067aa4a-9e4e-4194-bd6a-9286c1dba7df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Use the dynamically created expense ID\neditExpenseRequest.variables.id = expenseId;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(editExpenseRequest);\nexpect(response.body.errors[0].message).to.equal(\"Not authenticated\");",
                  "err": {},
                  "uuid": "26f1060b-7951-4d25-bb4e-0100824f31c7",
                  "parentUUID": "2067aa4a-9e4e-4194-bd6a-9286c1dba7df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Use the dynamically created expense ID\neditExpenseRequest.variables.id = expenseId;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(editExpenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body.data.editExpense).to.deep.equal(\n  expectedResponse.data.editExpense\n);",
                  "err": {},
                  "uuid": "c2349649-6d78-4098-bc93-dd85c46fc758",
                  "parentUUID": "2067aa4a-9e4e-4194-bd6a-9286c1dba7df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c879b4ff-9c87-463b-be16-367d04fb214b",
                "e2311ccb-c673-4192-ab7a-3cbcf3d8126b",
                "929eb06b-a612-43b5-a065-84b0a7fd89b3",
                "f2d62c82-559d-4c5e-9906-80752175c894",
                "26f1060b-7951-4d25-bb4e-0100824f31c7",
                "c2349649-6d78-4098-bc93-dd85c46fc758"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9f8792bd-d4a4-4570-8b94-529ed40205cd",
          "title": "User External - GraphQL",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
          "file": "/test/graphql/external/user/userExternal.graphql.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "38dc2f8d-5058-44c3-92ef-4adbf427ec5f",
              "title": "register mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
              "file": "/test/graphql/external/user/userExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - GraphQL register mutation Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "f92fa324-3164-40cd-91a3-d27da3290af5",
                  "parentUUID": "38dc2f8d-5058-44c3-92ef-4adbf427ec5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - GraphQL register mutation Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "850c98c6-5965-46e7-ae57-3bd26e68bae4",
                  "parentUUID": "38dc2f8d-5058-44c3-92ef-4adbf427ec5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User External - GraphQL register mutation Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "5acea973-2769-4327-a96a-2151dde100c4",
                  "parentUUID": "38dc2f8d-5058-44c3-92ef-4adbf427ec5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User External - GraphQL register mutation Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const username = `user${Math.floor(Math.random() * 100000)}`;\nconst mutation = `mutation { register(username: \\\"${username}\\\", password: \\\"password\\\") { message } }`;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send({ query: mutation });\nexpect(response.body.data.register.message).to.equal(\n  \"Usuário registrado com sucesso\"\n);",
                  "err": {},
                  "uuid": "a89e0266-a009-457e-9456-d4bfae1bb403",
                  "parentUUID": "38dc2f8d-5058-44c3-92ef-4adbf427ec5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f92fa324-3164-40cd-91a3-d27da3290af5",
                "850c98c6-5965-46e7-ae57-3bd26e68bae4",
                "5acea973-2769-4327-a96a-2151dde100c4",
                "a89e0266-a009-457e-9456-d4bfae1bb403"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 93,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "033d4943-66f1-4a8f-994c-294adeb93bf7",
              "title": "login query",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
              "file": "/test/graphql/external/user/userExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - GraphQL login query Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "094420c7-d65f-4e6d-a3ca-f3542738b5e2",
                  "parentUUID": "033d4943-66f1-4a8f-994c-294adeb93bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - GraphQL login query Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "42e4e23c-daff-479a-b99b-e07251f4b8bb",
                  "parentUUID": "033d4943-66f1-4a8f-994c-294adeb93bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User External - GraphQL login query Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "7979cdb9-f24f-4209-a9d7-c60d419aa171",
                  "parentUUID": "033d4943-66f1-4a8f-994c-294adeb93bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User External - GraphQL login query Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "76ce94c5-a5ca-40da-ac37-61d84c21bebe",
                  "parentUUID": "033d4943-66f1-4a8f-994c-294adeb93bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User External - GraphQL login query Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(loginRequest);\nexpect(response.body.data.login.token).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "b98b6a1a-24ac-4ab8-a993-671b01b938ae",
                  "parentUUID": "033d4943-66f1-4a8f-994c-294adeb93bf7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "094420c7-d65f-4e6d-a3ca-f3542738b5e2",
                "42e4e23c-daff-479a-b99b-e07251f4b8bb",
                "7979cdb9-f24f-4209-a9d7-c60d419aa171",
                "76ce94c5-a5ca-40da-ac37-61d84c21bebe",
                "b98b6a1a-24ac-4ab8-a993-671b01b938ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 52,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportFilename": "index"
      },
      "version": "6.3.0"
    }
  }
}