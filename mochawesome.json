{
  "stats": {
    "suites": 12,
    "tests": 38,
    "passes": 38,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T18:16:24.064Z",
    "end": "2025-09-19T18:16:24.384Z",
    "duration": 320,
    "testsRegistered": 38,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4b78e16f-7622-42c4-a7c0-5d8f05e04300",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7155f8bc-d946-42cf-bf24-9bd1fbb37266",
          "title": "Expense Controller",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
          "file": "/test/rest/controller/expense/expenseController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense Controller\"",
              "fullTitle": "Expense Controller \"before all\" hook in \"Expense Controller\"",
              "timedOut": false,
              "duration": 56,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst respostaLogin = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "f4b84214-09d9-4456-bb50-86430babbf5e",
              "parentUUID": "7155f8bc-d946-42cf-bf24-9bd1fbb37266",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a136c801-8143-4180-9938-d1f641f6357c",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
              "file": "/test/rest/controller/expense/expenseController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "69715a5d-501d-4670-b095-9edf8f4d99fe",
                  "parentUUID": "a136c801-8143-4180-9938-d1f641f6357c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "0e0277d8-cb9e-4de0-a222-0d9eca6027af",
                  "parentUUID": "a136c801-8143-4180-9938-d1f641f6357c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "13dd24ff-fcba-41b8-b9c1-9ddb94506388",
                  "parentUUID": "a136c801-8143-4180-9938-d1f641f6357c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense Controller POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "f78e33ae-0a14-4e23-af8b-eb815fdd8485",
                  "parentUUID": "a136c801-8143-4180-9938-d1f641f6357c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69715a5d-501d-4670-b095-9edf8f4d99fe",
                "0e0277d8-cb9e-4de0-a222-0d9eca6027af",
                "13dd24ff-fcba-41b8-b9c1-9ddb94506388",
                "f78e33ae-0a14-4e23-af8b-eb815fdd8485"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "dc29a1e0-9360-4887-b8fa-513491a637e3",
              "title": "PUT /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
              "file": "/test/rest/controller/expense/expenseController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e337cf80-a26d-49bd-990a-6f95f7d64373",
                  "parentUUID": "dc29a1e0-9360-4887-b8fa-513491a637e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "b0030b37-508f-462d-a806-1e53954c9dd0",
                  "parentUUID": "dc29a1e0-9360-4887-b8fa-513491a637e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "6bdaea7f-1808-4174-827c-5aef14a7fac8",
                  "parentUUID": "dc29a1e0-9360-4887-b8fa-513491a637e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor zero",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando o valor zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "805f83a3-91cc-44e8-a244-2cbcdc1662d5",
                  "parentUUID": "dc29a1e0-9360-4887-b8fa-513491a637e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "9b440b1d-a9d4-4bfc-92ff-bdecd66b95dc",
                  "parentUUID": "dc29a1e0-9360-4887-b8fa-513491a637e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense Controller PUT /expenses Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "11b222d5-bcc2-442f-a5c3-39979a183974",
                  "parentUUID": "dc29a1e0-9360-4887-b8fa-513491a637e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e337cf80-a26d-49bd-990a-6f95f7d64373",
                "b0030b37-508f-462d-a806-1e53954c9dd0",
                "6bdaea7f-1808-4174-827c-5aef14a7fac8",
                "805f83a3-91cc-44e8-a244-2cbcdc1662d5",
                "9b440b1d-a9d4-4bfc-92ff-bdecd66b95dc",
                "11b222d5-bcc2-442f-a5c3-39979a183974"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "47bff85b-51a1-4b8c-8adc-f166243dc190",
          "title": "Expense Controller - Mocked",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
          "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense Controller - Mocked\"",
              "fullTitle": "Expense Controller - Mocked \"before all\" hook in \"Expense Controller - Mocked\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app).post(\"/users/login\").send(loginRequest);\ntoken = response.body.token;",
              "err": {},
              "uuid": "43254177-76f0-436c-9406-fa1d13db19e1",
              "parentUUID": "47bff85b-51a1-4b8c-8adc-f166243dc190",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Expense Controller - Mocked\"",
              "fullTitle": "Expense Controller - Mocked \"after each\" hook in \"Expense Controller - Mocked\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e0d2a8ba-79df-4b58-87bf-040f6f5862ef",
              "parentUUID": "47bff85b-51a1-4b8c-8adc-f166243dc190",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ad3c357a-dd18-4379-b8a2-6906c609a69c",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
              "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "4797b0a1-5ad4-41e0-80e3-2733141fd76f",
                  "parentUUID": "ad3c357a-dd18-4379-b8a2-6906c609a69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c7cae560-fe98-43b0-bfba-37bdb4f21457",
                  "parentUUID": "ad3c357a-dd18-4379-b8a2-6906c609a69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "8e41ea6e-c22f-43d1-b1fb-013e6e385441",
                  "parentUUID": "ad3c357a-dd18-4379-b8a2-6906c609a69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.returns(expectedResponse.body);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "76fba542-29b5-4a80-80db-bb990b8eaf03",
                  "parentUUID": "ad3c357a-dd18-4379-b8a2-6906c609a69c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4797b0a1-5ad4-41e0-80e3-2733141fd76f",
                "c7cae560-fe98-43b0-bfba-37bdb4f21457",
                "8e41ea6e-c22f-43d1-b1fb-013e6e385441",
                "76fba542-29b5-4a80-80db-bb990b8eaf03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7f9a44ad-9a31-4235-9569-37f583583de6",
              "title": "PUT /expenses/:id",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
              "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "89d8a891-a065-4758-950e-13c73c3a8bb5",
                  "parentUUID": "7f9a44ad-9a31-4235-9569-37f583583de6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "b1931187-db94-4e86-82ec-4a072c012a72",
                  "parentUUID": "7f9a44ad-9a31-4235-9569-37f583583de6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "382b3371-a5cb-4773-85f0-21fdaebda08a",
                  "parentUUID": "7f9a44ad-9a31-4235-9569-37f583583de6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor zero",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor zero",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "b29942a7-f932-423c-bb28-3167580c4ace",
                  "parentUUID": "7f9a44ad-9a31-4235-9569-37f583583de6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "7e89113d-8ce8-42b2-855c-9d7b515704fc",
                  "parentUUID": "7f9a44ad-9a31-4235-9569-37f583583de6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve atualizar despesa com sucesso",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve atualizar despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.returns(expectedResponse.body);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "48ea90b6-3cc1-48ed-87a6-36651df146e1",
                  "parentUUID": "7f9a44ad-9a31-4235-9569-37f583583de6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89d8a891-a065-4758-950e-13c73c3a8bb5",
                "b1931187-db94-4e86-82ec-4a072c012a72",
                "382b3371-a5cb-4773-85f0-21fdaebda08a",
                "b29942a7-f932-423c-bb28-3167580c4ace",
                "7e89113d-8ce8-42b2-855c-9d7b515704fc",
                "48ea90b6-3cc1-48ed-87a6-36651df146e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "263c94f8-5906-470c-a8f6-eb0428833cd9",
          "title": "User Controller",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
          "file": "/test/rest/controller/user/userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e6d56445-bdaf-4ec9-b1ad-f7567d743560",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
              "file": "/test/rest/controller/user/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "5d8a7d78-b129-4646-bc54-de22e5472e11",
                  "parentUUID": "e6d56445-bdaf-4ec9-b1ad-f7567d743560",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "3e1be748-5ee5-403a-a6bb-044befe68c3c",
                  "parentUUID": "e6d56445-bdaf-4ec9-b1ad-f7567d743560",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "7d4ba3ae-c103-4cbc-99c9-8aca669c4132",
                  "parentUUID": "e6d56445-bdaf-4ec9-b1ad-f7567d743560",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User Controller POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({\n    username: `user${Math.random()}`,\n    password: \"password\",\n  });\nconst expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "4f8d7505-84d1-4ac4-9c75-aa93a8e748ac",
                  "parentUUID": "e6d56445-bdaf-4ec9-b1ad-f7567d743560",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d8a7d78-b129-4646-bc54-de22e5472e11",
                "3e1be748-5ee5-403a-a6bb-044befe68c3c",
                "7d4ba3ae-c103-4cbc-99c9-8aca669c4132",
                "4f8d7505-84d1-4ac4-9c75-aa93a8e748ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "663f4d23-dde3-45fc-b4ad-cd9efe53b90e",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
              "file": "/test/rest/controller/user/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "d5f2761d-ecc3-4bf4-a59d-ce6d92f42128",
                  "parentUUID": "663f4d23-dde3-45fc-b4ad-cd9efe53b90e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "40d28ed7-a5bd-449b-a9b7-a4474281dd1b",
                  "parentUUID": "663f4d23-dde3-45fc-b4ad-cd9efe53b90e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e3a1a144-a4cd-475c-b2a2-655dd0211f6e",
                  "parentUUID": "663f4d23-dde3-45fc-b4ad-cd9efe53b90e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "15b67256-3ffe-45a1-9404-3571b5a165b3",
                  "parentUUID": "663f4d23-dde3-45fc-b4ad-cd9efe53b90e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User Controller POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "2914a44f-7d17-4517-ab19-879ee353c4ac",
                  "parentUUID": "663f4d23-dde3-45fc-b4ad-cd9efe53b90e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5f2761d-ecc3-4bf4-a59d-ce6d92f42128",
                "40d28ed7-a5bd-449b-a9b7-a4474281dd1b",
                "e3a1a144-a4cd-475c-b2a2-655dd0211f6e",
                "15b67256-3ffe-45a1-9404-3571b5a165b3",
                "2914a44f-7d17-4517-ab19-879ee353c4ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d08db1c0-865f-4166-8a9b-37674cfb44b6",
          "title": "User Controller - Mocked",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
          "file": "/test/rest/controller/user/userControllerMocked.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Controller - Mocked\"",
              "fullTitle": "User Controller - Mocked \"after each\" hook in \"User Controller - Mocked\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "eeb75b70-b586-4d07-a043-ad3461cce67e",
              "parentUUID": "d08db1c0-865f-4166-8a9b-37674cfb44b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "db8e46fb-6863-4ad7-b508-da0aa4ad3570",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
              "file": "/test/rest/controller/user/userControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "0a2b734f-881a-4e3e-9773-63b3dcd06440",
                  "parentUUID": "db8e46fb-6863-4ad7-b508-da0aa4ad3570",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "5abfd22c-0e41-4b88-8690-41553e3485dd",
                  "parentUUID": "db8e46fb-6863-4ad7-b508-da0aa4ad3570",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "03d88d18-2a78-42e8-a42f-6f9a0264ce6b",
                  "parentUUID": "db8e46fb-6863-4ad7-b508-da0aa4ad3570",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.returns({\n  message: expectedResponse.body.message,\n  user: { username: \"user\", password: \"password\" },\n});\nconst response = await request(app).post(\"/users/register\").send({\n  username: \"username\",\n  password: \"password\",\n});\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "fc7b1eda-e746-4df8-81e5-d28826d0aef4",
                  "parentUUID": "db8e46fb-6863-4ad7-b508-da0aa4ad3570",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a2b734f-881a-4e3e-9773-63b3dcd06440",
                "5abfd22c-0e41-4b88-8690-41553e3485dd",
                "03d88d18-2a78-42e8-a42f-6f9a0264ce6b",
                "fc7b1eda-e746-4df8-81e5-d28826d0aef4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7f4810da-644e-42ff-b3ac-6ebcf1cd88b0",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
              "file": "/test/rest/controller/user/userControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "428e1c54-f87c-4fe7-95fb-d8551a6df078",
                  "parentUUID": "7f4810da-644e-42ff-b3ac-6ebcf1cd88b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "39b208d2-10ed-436a-866d-681b841c0875",
                  "parentUUID": "7f4810da-644e-42ff-b3ac-6ebcf1cd88b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "64aa91b8-da54-45ae-9742-0e752ba2d21b",
                  "parentUUID": "7f4810da-644e-42ff-b3ac-6ebcf1cd88b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "4101e10c-627e-4582-9163-4f28c1410de1",
                  "parentUUID": "7f4810da-644e-42ff-b3ac-6ebcf1cd88b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.returns({\n  token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.mocktoken\",\n});\nconst loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "30d02a08-30b4-44c3-8f49-7038e42d03cb",
                  "parentUUID": "7f4810da-644e-42ff-b3ac-6ebcf1cd88b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "428e1c54-f87c-4fe7-95fb-d8551a6df078",
                "39b208d2-10ed-436a-866d-681b841c0875",
                "64aa91b8-da54-45ae-9742-0e752ba2d21b",
                "4101e10c-627e-4582-9163-4f28c1410de1",
                "30d02a08-30b4-44c3-8f49-7038e42d03cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": "false"
      },
      "version": "6.3.0"
    }
  }
}