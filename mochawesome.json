{
  "stats": {
    "suites": 12,
    "tests": 38,
    "passes": 38,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T21:01:04.913Z",
    "end": "2025-09-19T21:01:05.241Z",
    "duration": 328,
    "testsRegistered": 38,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "df36d439-f5b2-4fe7-b6c0-a41a33a2f0c4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "15fae7cc-951a-4e0b-8812-57a910268838",
          "title": "Expense Controller",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
          "file": "/test/rest/controller/expense/expenseController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense Controller\"",
              "fullTitle": "Expense Controller \"before all\" hook in \"Expense Controller\"",
              "timedOut": false,
              "duration": 45,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst respostaLogin = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "7fb0131c-72b0-4d74-8fb2-b5c0ba7d5663",
              "parentUUID": "15fae7cc-951a-4e0b-8812-57a910268838",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "46cd22d1-a1b1-4bb4-aaec-13ccb648e775",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
              "file": "/test/rest/controller/expense/expenseController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "666fa81d-a9f5-4fd4-a506-f733d9c003b3",
                  "parentUUID": "46cd22d1-a1b1-4bb4-aaec-13ccb648e775",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "094072ac-2833-4335-ae53-0be91bca55c3",
                  "parentUUID": "46cd22d1-a1b1-4bb4-aaec-13ccb648e775",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c6002745-4179-4e46-bd1a-ee2de5b118a9",
                  "parentUUID": "46cd22d1-a1b1-4bb4-aaec-13ccb648e775",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense Controller POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "485dc8d7-2199-41a0-ae8d-673d7a754685",
                  "parentUUID": "46cd22d1-a1b1-4bb4-aaec-13ccb648e775",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "666fa81d-a9f5-4fd4-a506-f733d9c003b3",
                "094072ac-2833-4335-ae53-0be91bca55c3",
                "c6002745-4179-4e46-bd1a-ee2de5b118a9",
                "485dc8d7-2199-41a0-ae8d-673d7a754685"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "14489de4-384f-4ad3-90d1-2aa1c38914fa",
              "title": "PUT /expenses/:id",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
              "file": "/test/rest/controller/expense/expenseController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "d1d427d3-e15c-42b0-8d1b-408e746168d4",
                  "parentUUID": "14489de4-384f-4ad3-90d1-2aa1c38914fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "93413051-a78e-493e-b708-21e2f8b10e1a",
                  "parentUUID": "14489de4-384f-4ad3-90d1-2aa1c38914fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "745ce733-ef5a-4271-8128-e15006ae7ade",
                  "parentUUID": "14489de4-384f-4ad3-90d1-2aa1c38914fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor for igual a zero",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve retornar erro quando o valor for igual a zero",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "cc8344dc-c670-4183-86cf-e3435527260f",
                  "parentUUID": "14489de4-384f-4ad3-90d1-2aa1c38914fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ef130e51-d42f-4d9a-93e7-7b8fa0c3b2aa",
                  "parentUUID": "14489de4-384f-4ad3-90d1-2aa1c38914fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "6b3b3e09-adb4-4bc3-907f-58bd62c8528b",
                  "parentUUID": "14489de4-384f-4ad3-90d1-2aa1c38914fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1d427d3-e15c-42b0-8d1b-408e746168d4",
                "93413051-a78e-493e-b708-21e2f8b10e1a",
                "745ce733-ef5a-4271-8128-e15006ae7ade",
                "cc8344dc-c670-4183-86cf-e3435527260f",
                "ef130e51-d42f-4d9a-93e7-7b8fa0c3b2aa",
                "6b3b3e09-adb4-4bc3-907f-58bd62c8528b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "92982d94-44e4-4744-a0ca-a6dd1fc6bb24",
          "title": "Expense Controller - Mocked",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
          "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense Controller - Mocked\"",
              "fullTitle": "Expense Controller - Mocked \"before all\" hook in \"Expense Controller - Mocked\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app).post(\"/users/login\").send(loginRequest);\ntoken = response.body.token;",
              "err": {},
              "uuid": "d8fc0294-dbb0-49a2-a159-16e55b4d98bb",
              "parentUUID": "92982d94-44e4-4744-a0ca-a6dd1fc6bb24",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Expense Controller - Mocked\"",
              "fullTitle": "Expense Controller - Mocked \"after each\" hook in \"Expense Controller - Mocked\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ae39c215-da02-495a-aaa0-01cbf6c87ef4",
              "parentUUID": "92982d94-44e4-4744-a0ca-a6dd1fc6bb24",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "31615ec6-4e17-4ff0-b944-f7314b6ec11c",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
              "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "0c624b61-e648-40b6-8c78-242e56efe423",
                  "parentUUID": "31615ec6-4e17-4ff0-b944-f7314b6ec11c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ff7b19e1-e881-4493-b4b9-774845d79713",
                  "parentUUID": "31615ec6-4e17-4ff0-b944-f7314b6ec11c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "91364ef1-6a1c-4c26-992a-d5b83f9e7cca",
                  "parentUUID": "31615ec6-4e17-4ff0-b944-f7314b6ec11c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.returns(expectedResponse.body);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "70ed84d1-1872-48b0-9087-01eccb3e1a4a",
                  "parentUUID": "31615ec6-4e17-4ff0-b944-f7314b6ec11c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c624b61-e648-40b6-8c78-242e56efe423",
                "ff7b19e1-e881-4493-b4b9-774845d79713",
                "91364ef1-6a1c-4c26-992a-d5b83f9e7cca",
                "70ed84d1-1872-48b0-9087-01eccb3e1a4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8557b6cb-b642-494f-b85b-a6edd2b8c1c1",
              "title": "PUT /expenses/:id",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
              "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "20d3f8ec-11aa-4b76-89e5-b043ae5b573f",
                  "parentUUID": "8557b6cb-b642-494f-b85b-a6edd2b8c1c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "3c172c17-96a4-4ad9-92aa-7c0ed4af9cf2",
                  "parentUUID": "8557b6cb-b642-494f-b85b-a6edd2b8c1c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "73f209ed-c469-4b1a-8bc7-08a93c64f257",
                  "parentUUID": "8557b6cb-b642-494f-b85b-a6edd2b8c1c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor for igual a zero",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor for igual a zero",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "bd18cf9d-98c9-40d6-b03c-57ab8878dc2b",
                  "parentUUID": "8557b6cb-b642-494f-b85b-a6edd2b8c1c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "d1fb8670-6680-41e4-bb06-66bd5f5ee8b7",
                  "parentUUID": "8557b6cb-b642-494f-b85b-a6edd2b8c1c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.returns(expectedResponse.body);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "81ec3f3e-d7d2-4e69-92c2-d2582c5fb6b5",
                  "parentUUID": "8557b6cb-b642-494f-b85b-a6edd2b8c1c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20d3f8ec-11aa-4b76-89e5-b043ae5b573f",
                "3c172c17-96a4-4ad9-92aa-7c0ed4af9cf2",
                "73f209ed-c469-4b1a-8bc7-08a93c64f257",
                "bd18cf9d-98c9-40d6-b03c-57ab8878dc2b",
                "d1fb8670-6680-41e4-bb06-66bd5f5ee8b7",
                "81ec3f3e-d7d2-4e69-92c2-d2582c5fb6b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "27dba795-0cce-4358-b542-4a5af4cf53a4",
          "title": "User Controller",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
          "file": "/test/rest/controller/user/userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac326acb-631d-4287-981d-06eb411438cb",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
              "file": "/test/rest/controller/user/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "4d4320d8-a2aa-4d30-acb7-2a400fd73130",
                  "parentUUID": "ac326acb-631d-4287-981d-06eb411438cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "a7f765e0-174e-4212-ac1c-0e0bc8699371",
                  "parentUUID": "ac326acb-631d-4287-981d-06eb411438cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "a1ce4be8-2bf0-4bff-88d9-f77d9d2b896b",
                  "parentUUID": "ac326acb-631d-4287-981d-06eb411438cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User Controller POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({\n    username: `user${Math.random()}`,\n    password: \"password\",\n  });\nconst expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "1acc07db-87e3-4c8b-b483-703e91a1742b",
                  "parentUUID": "ac326acb-631d-4287-981d-06eb411438cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d4320d8-a2aa-4d30-acb7-2a400fd73130",
                "a7f765e0-174e-4212-ac1c-0e0bc8699371",
                "a1ce4be8-2bf0-4bff-88d9-f77d9d2b896b",
                "1acc07db-87e3-4c8b-b483-703e91a1742b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "26d4690c-f68a-4d8b-b2ae-edc09869f067",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
              "file": "/test/rest/controller/user/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "6a81760e-d201-42d8-9819-7359b9351e26",
                  "parentUUID": "26d4690c-f68a-4d8b-b2ae-edc09869f067",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "0b95d7dc-5afd-4bf1-aef0-162e34640c53",
                  "parentUUID": "26d4690c-f68a-4d8b-b2ae-edc09869f067",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "941166fb-f2ca-4c88-9020-fdf915fcb81f",
                  "parentUUID": "26d4690c-f68a-4d8b-b2ae-edc09869f067",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "7bf113b7-50fb-4d8d-9e87-87c65e82a27c",
                  "parentUUID": "26d4690c-f68a-4d8b-b2ae-edc09869f067",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User Controller POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "c7f88862-7fda-4918-ba26-a78b345bf497",
                  "parentUUID": "26d4690c-f68a-4d8b-b2ae-edc09869f067",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a81760e-d201-42d8-9819-7359b9351e26",
                "0b95d7dc-5afd-4bf1-aef0-162e34640c53",
                "941166fb-f2ca-4c88-9020-fdf915fcb81f",
                "7bf113b7-50fb-4d8d-9e87-87c65e82a27c",
                "c7f88862-7fda-4918-ba26-a78b345bf497"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 55,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b0957935-d546-4260-b61b-9cbeb275e3b7",
          "title": "User Controller - Mocked",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
          "file": "/test/rest/controller/user/userControllerMocked.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Controller - Mocked\"",
              "fullTitle": "User Controller - Mocked \"after each\" hook in \"User Controller - Mocked\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8b649bd8-1a40-498b-8842-7f986ddf8fe8",
              "parentUUID": "b0957935-d546-4260-b61b-9cbeb275e3b7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "82ba43bc-45ce-4efc-a7bd-c569419588ae",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
              "file": "/test/rest/controller/user/userControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ca288ee9-afd1-4d66-8173-7e8fb26c6868",
                  "parentUUID": "82ba43bc-45ce-4efc-a7bd-c569419588ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "cce0f66d-a774-456b-ad3d-7f486a7be62b",
                  "parentUUID": "82ba43bc-45ce-4efc-a7bd-c569419588ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ec215356-4ce1-4aca-bd23-ba8db3ffb396",
                  "parentUUID": "82ba43bc-45ce-4efc-a7bd-c569419588ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.returns({\n  message: expectedResponse.body.message,\n  user: { username: \"user\", password: \"password\" },\n});\nconst response = await request(app).post(\"/users/register\").send({\n  username: \"username\",\n  password: \"password\",\n});\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "4c94cba0-f8d9-44db-bab5-fe15db503346",
                  "parentUUID": "82ba43bc-45ce-4efc-a7bd-c569419588ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca288ee9-afd1-4d66-8173-7e8fb26c6868",
                "cce0f66d-a774-456b-ad3d-7f486a7be62b",
                "ec215356-4ce1-4aca-bd23-ba8db3ffb396",
                "4c94cba0-f8d9-44db-bab5-fe15db503346"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "fdf06658-a959-4327-9913-c451d8b9d395",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
              "file": "/test/rest/controller/user/userControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "4902f44d-799d-4732-8036-9744e627ed55",
                  "parentUUID": "fdf06658-a959-4327-9913-c451d8b9d395",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "153e0b6b-9416-481e-ba7f-2d76c47bc0a8",
                  "parentUUID": "fdf06658-a959-4327-9913-c451d8b9d395",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "1040d3f4-d45f-4187-8456-3ecdb650cc87",
                  "parentUUID": "fdf06658-a959-4327-9913-c451d8b9d395",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "aabf0db3-2437-4a3f-881d-669c80c31f90",
                  "parentUUID": "fdf06658-a959-4327-9913-c451d8b9d395",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.returns({\n  token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.mocktoken\",\n});\nconst loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "978e81b1-53e2-48c8-b1dc-67f4fd59b44d",
                  "parentUUID": "fdf06658-a959-4327-9913-c451d8b9d395",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4902f44d-799d-4732-8036-9744e627ed55",
                "153e0b6b-9416-481e-ba7f-2d76c47bc0a8",
                "1040d3f4-d45f-4187-8456-3ecdb650cc87",
                "aabf0db3-2437-4a3f-881d-669c80c31f90",
                "978e81b1-53e2-48c8-b1dc-67f4fd59b44d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": "false"
      },
      "version": "6.3.0"
    }
  }
}