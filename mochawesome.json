{
  "stats": {
    "suites": 12,
    "tests": 38,
    "passes": 38,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T21:04:37.586Z",
    "end": "2025-09-19T21:04:37.892Z",
    "duration": 306,
    "testsRegistered": 38,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9b8cb563-3cfb-492a-9408-e203e662c883",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "13159f6a-d2e9-480d-af03-d35861f810b7",
          "title": "Expense Controller",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
          "file": "/test/rest/controller/expense/expenseController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense Controller\"",
              "fullTitle": "Expense Controller \"before all\" hook in \"Expense Controller\"",
              "timedOut": false,
              "duration": 44,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst respostaLogin = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "b830aaca-40a6-46ae-b830-28409a8e4555",
              "parentUUID": "13159f6a-d2e9-480d-af03-d35861f810b7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b917d0ce-0580-4427-9956-77cb5b9f5bf7",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
              "file": "/test/rest/controller/expense/expenseController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "5d321b0a-6f27-4489-996e-b523c6862bfd",
                  "parentUUID": "b917d0ce-0580-4427-9956-77cb5b9f5bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "748e65b7-e2a7-4a02-903e-bdf2e5a0aca4",
                  "parentUUID": "b917d0ce-0580-4427-9956-77cb5b9f5bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "0af681cd-b55c-48d7-af17-1849540941d7",
                  "parentUUID": "b917d0ce-0580-4427-9956-77cb5b9f5bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense Controller POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "6209f8d4-6b67-4e40-9eff-50388e779438",
                  "parentUUID": "b917d0ce-0580-4427-9956-77cb5b9f5bf7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d321b0a-6f27-4489-996e-b523c6862bfd",
                "748e65b7-e2a7-4a02-903e-bdf2e5a0aca4",
                "0af681cd-b55c-48d7-af17-1849540941d7",
                "6209f8d4-6b67-4e40-9eff-50388e779438"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d71a9dd7-23f3-4817-9c80-aab729f282d1",
              "title": "PUT /expenses/:id",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
              "file": "/test/rest/controller/expense/expenseController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "d1a85f1e-6aca-45b2-901f-9aba7ad308c9",
                  "parentUUID": "d71a9dd7-23f3-4817-9c80-aab729f282d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ed7fc36c-6e23-4af3-9d4e-58e594019533",
                  "parentUUID": "d71a9dd7-23f3-4817-9c80-aab729f282d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c71e35d8-8413-4028-847b-827d927faa3a",
                  "parentUUID": "d71a9dd7-23f3-4817-9c80-aab729f282d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor for igual a zero",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve retornar erro quando o valor for igual a zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "57568968-9318-48a2-bb64-9eaac8c034f4",
                  "parentUUID": "d71a9dd7-23f3-4817-9c80-aab729f282d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "6a7e5cc6-51ff-4bf6-a092-eb04c92af683",
                  "parentUUID": "d71a9dd7-23f3-4817-9c80-aab729f282d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense Controller PUT /expenses/:id Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "f57673a0-84b8-494a-9f0f-9b70b39a4a29",
                  "parentUUID": "d71a9dd7-23f3-4817-9c80-aab729f282d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1a85f1e-6aca-45b2-901f-9aba7ad308c9",
                "ed7fc36c-6e23-4af3-9d4e-58e594019533",
                "c71e35d8-8413-4028-847b-827d927faa3a",
                "57568968-9318-48a2-bb64-9eaac8c034f4",
                "6a7e5cc6-51ff-4bf6-a092-eb04c92af683",
                "f57673a0-84b8-494a-9f0f-9b70b39a4a29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "af17e8c4-1ec9-4832-8fdd-82646aff3b04",
          "title": "Expense Controller - Mocked",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
          "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense Controller - Mocked\"",
              "fullTitle": "Expense Controller - Mocked \"before all\" hook in \"Expense Controller - Mocked\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app).post(\"/users/login\").send(loginRequest);\ntoken = response.body.token;",
              "err": {},
              "uuid": "5b17680e-f5ba-4220-b8e8-ef342e3a0537",
              "parentUUID": "af17e8c4-1ec9-4832-8fdd-82646aff3b04",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Expense Controller - Mocked\"",
              "fullTitle": "Expense Controller - Mocked \"after each\" hook in \"Expense Controller - Mocked\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "cee7adb5-52e1-4fe3-8bd8-aebf7600f3f9",
              "parentUUID": "af17e8c4-1ec9-4832-8fdd-82646aff3b04",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b723feb7-8c57-4bf9-8497-a77f20ab84b7",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
              "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c22b3846-8736-4e05-b3eb-ebc71d6389fe",
                  "parentUUID": "b723feb7-8c57-4bf9-8497-a77f20ab84b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ad3070e9-d28e-4894-a7b4-1607904dc085",
                  "parentUUID": "b723feb7-8c57-4bf9-8497-a77f20ab84b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "a5309a60-d877-4a3f-8322-a73b3439d934",
                  "parentUUID": "b723feb7-8c57-4bf9-8497-a77f20ab84b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.returns(expectedResponse.body);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "f1590a0f-7a76-4b71-945a-47e38a9fc7c1",
                  "parentUUID": "b723feb7-8c57-4bf9-8497-a77f20ab84b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c22b3846-8736-4e05-b3eb-ebc71d6389fe",
                "ad3070e9-d28e-4894-a7b4-1607904dc085",
                "a5309a60-d877-4a3f-8322-a73b3439d934",
                "f1590a0f-7a76-4b71-945a-47e38a9fc7c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7c259147-7d13-4149-ba3e-da3741661ad2",
              "title": "PUT /expenses/:id",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
              "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "95e5d4ba-dd60-4be8-b02b-4c54c84a716a",
                  "parentUUID": "7c259147-7d13-4149-ba3e-da3741661ad2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ffe00a65-be85-44e4-b4ab-e8f38cb4d7f7",
                  "parentUUID": "7c259147-7d13-4149-ba3e-da3741661ad2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "60174613-8c4f-4712-acea-d224fc505f5c",
                  "parentUUID": "7c259147-7d13-4149-ba3e-da3741661ad2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor for igual a zero",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor for igual a zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "a716d394-495e-4f26-9dde-9e2380ef0d67",
                  "parentUUID": "7c259147-7d13-4149-ba3e-da3741661ad2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "f63e30bf-12c6-4fce-9dca-52d6df9fad8d",
                  "parentUUID": "7c259147-7d13-4149-ba3e-da3741661ad2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.returns(expectedResponse.body);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "bae9df6b-f307-4086-92cb-cdcfd9d4e8f4",
                  "parentUUID": "7c259147-7d13-4149-ba3e-da3741661ad2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95e5d4ba-dd60-4be8-b02b-4c54c84a716a",
                "ffe00a65-be85-44e4-b4ab-e8f38cb4d7f7",
                "60174613-8c4f-4712-acea-d224fc505f5c",
                "a716d394-495e-4f26-9dde-9e2380ef0d67",
                "f63e30bf-12c6-4fce-9dca-52d6df9fad8d",
                "bae9df6b-f307-4086-92cb-cdcfd9d4e8f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1f191bb7-c9f8-4144-9c51-6544c7c7679e",
          "title": "User Controller",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
          "file": "/test/rest/controller/user/userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a648276-0376-43cd-9863-e1aece519cd6",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
              "file": "/test/rest/controller/user/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c1b79894-baf7-40b9-aa58-3e9fd09fbbdf",
                  "parentUUID": "6a648276-0376-43cd-9863-e1aece519cd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "bdfd22b6-3ef4-429d-945d-2ad6c06ece7e",
                  "parentUUID": "6a648276-0376-43cd-9863-e1aece519cd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "7a78d39e-b06d-406f-bd4c-6948002c0220",
                  "parentUUID": "6a648276-0376-43cd-9863-e1aece519cd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User Controller POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({\n    username: `user${Math.random()}`,\n    password: \"password\",\n  });\nconst expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "0e5b94fe-667b-4592-96ed-d50c6558a367",
                  "parentUUID": "6a648276-0376-43cd-9863-e1aece519cd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1b79894-baf7-40b9-aa58-3e9fd09fbbdf",
                "bdfd22b6-3ef4-429d-945d-2ad6c06ece7e",
                "7a78d39e-b06d-406f-bd4c-6948002c0220",
                "0e5b94fe-667b-4592-96ed-d50c6558a367"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e6b66fbd-503a-4f36-b723-8be996607407",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
              "file": "/test/rest/controller/user/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "172aff27-d205-4eef-a2c1-1a040ec7a316",
                  "parentUUID": "e6b66fbd-503a-4f36-b723-8be996607407",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "b78d2eaa-ea40-43d0-9ede-e3825d4e640b",
                  "parentUUID": "e6b66fbd-503a-4f36-b723-8be996607407",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "dab39820-a421-4e7f-ad3b-8ac64a860a19",
                  "parentUUID": "e6b66fbd-503a-4f36-b723-8be996607407",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "eaf2bfec-4675-4fef-b7ea-0dfc6e8b2a3a",
                  "parentUUID": "e6b66fbd-503a-4f36-b723-8be996607407",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User Controller POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "f9406cdc-35ec-46de-8697-b3c4300944eb",
                  "parentUUID": "e6b66fbd-503a-4f36-b723-8be996607407",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "172aff27-d205-4eef-a2c1-1a040ec7a316",
                "b78d2eaa-ea40-43d0-9ede-e3825d4e640b",
                "dab39820-a421-4e7f-ad3b-8ac64a860a19",
                "eaf2bfec-4675-4fef-b7ea-0dfc6e8b2a3a",
                "f9406cdc-35ec-46de-8697-b3c4300944eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 54,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1b932a5c-a1a7-418d-bab4-3a32c4b35f59",
          "title": "User Controller - Mocked",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
          "file": "/test/rest/controller/user/userControllerMocked.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Controller - Mocked\"",
              "fullTitle": "User Controller - Mocked \"after each\" hook in \"User Controller - Mocked\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4a072f80-dfc8-4f49-b3af-400df62751c0",
              "parentUUID": "1b932a5c-a1a7-418d-bab4-3a32c4b35f59",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1ffdbf8c-902f-4d3c-aec4-724d5d34483d",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
              "file": "/test/rest/controller/user/userControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "53e7d4c2-a2c7-4463-a17f-b56b19c1296d",
                  "parentUUID": "1ffdbf8c-902f-4d3c-aec4-724d5d34483d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "479b74e8-988d-4319-b216-8e325f7a2e6f",
                  "parentUUID": "1ffdbf8c-902f-4d3c-aec4-724d5d34483d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "60f8c426-e719-4a9a-bf91-5d4faf058a67",
                  "parentUUID": "1ffdbf8c-902f-4d3c-aec4-724d5d34483d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.returns({\n  message: expectedResponse.body.message,\n  user: { username: \"user\", password: \"password\" },\n});\nconst response = await request(app).post(\"/users/register\").send({\n  username: \"username\",\n  password: \"password\",\n});\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "d5fe21e5-3a5b-4968-bf45-cd51d1c38601",
                  "parentUUID": "1ffdbf8c-902f-4d3c-aec4-724d5d34483d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53e7d4c2-a2c7-4463-a17f-b56b19c1296d",
                "479b74e8-988d-4319-b216-8e325f7a2e6f",
                "60f8c426-e719-4a9a-bf91-5d4faf058a67",
                "d5fe21e5-3a5b-4968-bf45-cd51d1c38601"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "20d6156e-2e85-403e-8a4b-2949bdeeeb83",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
              "file": "/test/rest/controller/user/userControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "0d2a323a-e3d6-4ea0-9e6a-9ddc093367a5",
                  "parentUUID": "20d6156e-2e85-403e-8a4b-2949bdeeeb83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "26831840-1f8a-40e3-8188-c713a254352e",
                  "parentUUID": "20d6156e-2e85-403e-8a4b-2949bdeeeb83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "d4a66519-2944-42f7-bcf2-e7f6cc164003",
                  "parentUUID": "20d6156e-2e85-403e-8a4b-2949bdeeeb83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "349d8af3-8076-4a4c-afec-99861fd73e95",
                  "parentUUID": "20d6156e-2e85-403e-8a4b-2949bdeeeb83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.returns({\n  token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.mocktoken\",\n});\nconst loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "f365d2cb-6ec0-4688-bd3d-f654025dd358",
                  "parentUUID": "20d6156e-2e85-403e-8a4b-2949bdeeeb83",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d2a323a-e3d6-4ea0-9e6a-9ddc093367a5",
                "26831840-1f8a-40e3-8188-c713a254352e",
                "d4a66519-2944-42f7-bcf2-e7f6cc164003",
                "349d8af3-8076-4a4c-afec-99861fd73e95",
                "f365d2cb-6ec0-4688-bd3d-f654025dd358"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": "false"
      },
      "version": "6.3.0"
    }
  }
}