{
  "stats": {
    "suites": 12,
    "tests": 38,
    "passes": 38,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T18:22:11.482Z",
    "end": "2025-09-19T18:22:11.808Z",
    "duration": 326,
    "testsRegistered": 38,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a17c7916-f8f6-462b-9c5c-a6760851396e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b5c6a455-b685-44e6-b37d-c34b26d6a283",
          "title": "Expense Controller",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
          "file": "/test/rest/controller/expense/expenseController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense Controller\"",
              "fullTitle": "Expense Controller \"before all\" hook in \"Expense Controller\"",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst respostaLogin = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "ef6d890e-6602-4442-8f6a-7af6841d75f9",
              "parentUUID": "b5c6a455-b685-44e6-b37d-c34b26d6a283",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8df2a82e-19d4-4f55-8d1c-38e33510f644",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
              "file": "/test/rest/controller/expense/expenseController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "769a41ca-af38-4b85-a3f5-357a00a01e64",
                  "parentUUID": "8df2a82e-19d4-4f55-8d1c-38e33510f644",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "af4b2d1a-2da0-408c-8664-8af1a3f1effe",
                  "parentUUID": "8df2a82e-19d4-4f55-8d1c-38e33510f644",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "fcd43dd8-b460-459f-80a2-17cf7955a6ec",
                  "parentUUID": "8df2a82e-19d4-4f55-8d1c-38e33510f644",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense Controller POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "023f4310-839f-4b78-a174-bfba6438594b",
                  "parentUUID": "8df2a82e-19d4-4f55-8d1c-38e33510f644",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "769a41ca-af38-4b85-a3f5-357a00a01e64",
                "af4b2d1a-2da0-408c-8664-8af1a3f1effe",
                "fcd43dd8-b460-459f-80a2-17cf7955a6ec",
                "023f4310-839f-4b78-a174-bfba6438594b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4345bfe4-c926-411a-913f-e18e687e847a",
              "title": "PUT /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
              "file": "/test/rest/controller/expense/expenseController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "cb19fa5c-d7d0-4137-b073-14f107f4b3bd",
                  "parentUUID": "4345bfe4-c926-411a-913f-e18e687e847a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "d98ea1d9-3564-4a0a-84f7-e3356615d40a",
                  "parentUUID": "4345bfe4-c926-411a-913f-e18e687e847a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "814756c3-cc39-4448-8b87-4e408e874e51",
                  "parentUUID": "4345bfe4-c926-411a-913f-e18e687e847a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor zero",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando o valor zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "f2b3bc76-1e44-4183-826c-40ba17dccae5",
                  "parentUUID": "4345bfe4-c926-411a-913f-e18e687e847a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c5870704-efb0-4bbb-84f3-c992ef01425e",
                  "parentUUID": "4345bfe4-c926-411a-913f-e18e687e847a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense Controller PUT /expenses Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "6a1231c5-c614-4318-9a6b-192170d530cd",
                  "parentUUID": "4345bfe4-c926-411a-913f-e18e687e847a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb19fa5c-d7d0-4137-b073-14f107f4b3bd",
                "d98ea1d9-3564-4a0a-84f7-e3356615d40a",
                "814756c3-cc39-4448-8b87-4e408e874e51",
                "f2b3bc76-1e44-4183-826c-40ba17dccae5",
                "c5870704-efb0-4bbb-84f3-c992ef01425e",
                "6a1231c5-c614-4318-9a6b-192170d530cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9b690494-f615-46f5-ab53-62dd05fe8022",
          "title": "Expense Controller - Mocked",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
          "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense Controller - Mocked\"",
              "fullTitle": "Expense Controller - Mocked \"before all\" hook in \"Expense Controller - Mocked\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app).post(\"/users/login\").send(loginRequest);\ntoken = response.body.token;",
              "err": {},
              "uuid": "1f2d889c-f0a0-4ed0-9e00-333a3fdaa8d7",
              "parentUUID": "9b690494-f615-46f5-ab53-62dd05fe8022",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Expense Controller - Mocked\"",
              "fullTitle": "Expense Controller - Mocked \"after each\" hook in \"Expense Controller - Mocked\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d1f6a392-a209-485c-91e5-5ae3322a0e37",
              "parentUUID": "9b690494-f615-46f5-ab53-62dd05fe8022",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "4d2b866c-57cd-4e90-8553-74b76641e143",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
              "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "50f84628-6ef7-44f6-aeed-3c5cdd3a2608",
                  "parentUUID": "4d2b866c-57cd-4e90-8553-74b76641e143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "2621305a-118b-4b8c-ab19-f4a87bd3a7d7",
                  "parentUUID": "4d2b866c-57cd-4e90-8553-74b76641e143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "70861f9f-2111-4977-9e4f-d8eee08255bc",
                  "parentUUID": "4d2b866c-57cd-4e90-8553-74b76641e143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.returns(expectedResponse.body);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "9febffe8-9b8d-4394-9fcd-18947b25ba28",
                  "parentUUID": "4d2b866c-57cd-4e90-8553-74b76641e143",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50f84628-6ef7-44f6-aeed-3c5cdd3a2608",
                "2621305a-118b-4b8c-ab19-f4a87bd3a7d7",
                "70861f9f-2111-4977-9e4f-d8eee08255bc",
                "9febffe8-9b8d-4394-9fcd-18947b25ba28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5f7bb68f-c9c1-465a-9732-d9fba745d67e",
              "title": "PUT /expenses/:id",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
              "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "7fa85e8d-cd58-4e7d-8232-ff662d114b4b",
                  "parentUUID": "5f7bb68f-c9c1-465a-9732-d9fba745d67e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "853676d3-ba5a-43a4-909c-026c4f59cfe1",
                  "parentUUID": "5f7bb68f-c9c1-465a-9732-d9fba745d67e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "b978afbd-2acd-4b65-b921-5710456b85c6",
                  "parentUUID": "5f7bb68f-c9c1-465a-9732-d9fba745d67e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor zero",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor zero",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "a86eb528-acd4-403e-8a0c-83619e64171a",
                  "parentUUID": "5f7bb68f-c9c1-465a-9732-d9fba745d67e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "82f38d1e-85ad-474a-a59b-d535ce4c5d00",
                  "parentUUID": "5f7bb68f-c9c1-465a-9732-d9fba745d67e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve atualizar despesa com sucesso",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve atualizar despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.returns(expectedResponse.body);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "7ee7d624-0905-4fbb-b3db-03d849593f5a",
                  "parentUUID": "5f7bb68f-c9c1-465a-9732-d9fba745d67e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fa85e8d-cd58-4e7d-8232-ff662d114b4b",
                "853676d3-ba5a-43a4-909c-026c4f59cfe1",
                "b978afbd-2acd-4b65-b921-5710456b85c6",
                "a86eb528-acd4-403e-8a0c-83619e64171a",
                "82f38d1e-85ad-474a-a59b-d535ce4c5d00",
                "7ee7d624-0905-4fbb-b3db-03d849593f5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b204c63e-58bb-496f-9319-9b77ca3b6dd2",
          "title": "User Controller",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
          "file": "/test/rest/controller/user/userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2296f44c-3a06-4e27-a14b-6bf741f59b34",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
              "file": "/test/rest/controller/user/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "b7e115c6-86fe-4cf6-a6a2-fdba89eff541",
                  "parentUUID": "2296f44c-3a06-4e27-a14b-6bf741f59b34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "1253e974-3b0d-4830-9021-d29f526494da",
                  "parentUUID": "2296f44c-3a06-4e27-a14b-6bf741f59b34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "919b9524-f88b-4b6e-bb16-01b9ee4bf504",
                  "parentUUID": "2296f44c-3a06-4e27-a14b-6bf741f59b34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User Controller POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({\n    username: `user${Math.random()}`,\n    password: \"password\",\n  });\nconst expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "437d86c2-9d55-4602-9e25-98fd7d054c45",
                  "parentUUID": "2296f44c-3a06-4e27-a14b-6bf741f59b34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7e115c6-86fe-4cf6-a6a2-fdba89eff541",
                "1253e974-3b0d-4830-9021-d29f526494da",
                "919b9524-f88b-4b6e-bb16-01b9ee4bf504",
                "437d86c2-9d55-4602-9e25-98fd7d054c45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ab58abfb-c575-44af-b4e3-17ce816fe67a",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
              "file": "/test/rest/controller/user/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "5fa6425d-31da-459c-813d-592fd7f44f5d",
                  "parentUUID": "ab58abfb-c575-44af-b4e3-17ce816fe67a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e9395709-0fbf-4054-a211-10d8c850d894",
                  "parentUUID": "ab58abfb-c575-44af-b4e3-17ce816fe67a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e195c9ff-4fc6-4a31-a79e-8688ee197650",
                  "parentUUID": "ab58abfb-c575-44af-b4e3-17ce816fe67a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c46cb636-758d-40ea-aa61-a3f7f88ee9da",
                  "parentUUID": "ab58abfb-c575-44af-b4e3-17ce816fe67a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User Controller POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "66c25b4d-3625-478c-b15a-ec7ab2c0e181",
                  "parentUUID": "ab58abfb-c575-44af-b4e3-17ce816fe67a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fa6425d-31da-459c-813d-592fd7f44f5d",
                "e9395709-0fbf-4054-a211-10d8c850d894",
                "e195c9ff-4fc6-4a31-a79e-8688ee197650",
                "c46cb636-758d-40ea-aa61-a3f7f88ee9da",
                "66c25b4d-3625-478c-b15a-ec7ab2c0e181"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 51,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "58152219-3a9d-47c3-8488-ef178c3b2f72",
          "title": "User Controller - Mocked",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
          "file": "/test/rest/controller/user/userControllerMocked.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Controller - Mocked\"",
              "fullTitle": "User Controller - Mocked \"after each\" hook in \"User Controller - Mocked\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8bb21429-8fb7-4acb-a59e-d24e9819214e",
              "parentUUID": "58152219-3a9d-47c3-8488-ef178c3b2f72",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "684f56df-3b23-4b2e-935c-d8aff4e812c8",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
              "file": "/test/rest/controller/user/userControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "6e9945aa-858c-452a-aea1-cf335df5bb26",
                  "parentUUID": "684f56df-3b23-4b2e-935c-d8aff4e812c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "465a8802-1150-4d93-9c08-f40cc2c729f4",
                  "parentUUID": "684f56df-3b23-4b2e-935c-d8aff4e812c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "bc144bd6-fc4a-414c-a0a3-180b4f9304d3",
                  "parentUUID": "684f56df-3b23-4b2e-935c-d8aff4e812c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.returns({\n  message: expectedResponse.body.message,\n  user: { username: \"user\", password: \"password\" },\n});\nconst response = await request(app).post(\"/users/register\").send({\n  username: \"username\",\n  password: \"password\",\n});\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "15d3b76c-8914-47c3-96e1-a562dc3d809f",
                  "parentUUID": "684f56df-3b23-4b2e-935c-d8aff4e812c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e9945aa-858c-452a-aea1-cf335df5bb26",
                "465a8802-1150-4d93-9c08-f40cc2c729f4",
                "bc144bd6-fc4a-414c-a0a3-180b4f9304d3",
                "15d3b76c-8914-47c3-96e1-a562dc3d809f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2145b5c4-047e-4f91-81f1-73eb4a794b24",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
              "file": "/test/rest/controller/user/userControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "395c0e71-fa84-44d8-a37f-755e093f2b1f",
                  "parentUUID": "2145b5c4-047e-4f91-81f1-73eb4a794b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c54a663d-a8fa-4f0f-8fc4-1371f830d9c4",
                  "parentUUID": "2145b5c4-047e-4f91-81f1-73eb4a794b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "3255b240-e4fe-4ad7-8352-767f8d21fb30",
                  "parentUUID": "2145b5c4-047e-4f91-81f1-73eb4a794b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "418d7982-a45d-433c-bc6d-474a5cd60f8a",
                  "parentUUID": "2145b5c4-047e-4f91-81f1-73eb4a794b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.returns({\n  token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.mocktoken\",\n});\nconst loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "18b0071f-57c3-4f3e-8d8c-f1814db45a48",
                  "parentUUID": "2145b5c4-047e-4f91-81f1-73eb4a794b24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "395c0e71-fa84-44d8-a37f-755e093f2b1f",
                "c54a663d-a8fa-4f0f-8fc4-1371f830d9c4",
                "3255b240-e4fe-4ad7-8352-767f8d21fb30",
                "418d7982-a45d-433c-bc6d-474a5cd60f8a",
                "18b0071f-57c3-4f3e-8d8c-f1814db45a48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": "false"
      },
      "version": "6.3.0"
    }
  }
}