{
  "stats": {
    "suites": 12,
    "tests": 38,
    "passes": 38,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T18:14:12.594Z",
    "end": "2025-09-19T18:14:12.911Z",
    "duration": 317,
    "testsRegistered": 38,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b3708ae8-2655-43f1-a51f-bf1d749ea0a1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "71300e6f-7a56-4df7-af35-9343afc4f25d",
          "title": "Expense Controller",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
          "file": "/test/rest/controller/expense/expenseController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense Controller\"",
              "fullTitle": "Expense Controller \"before all\" hook in \"Expense Controller\"",
              "timedOut": false,
              "duration": 45,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst respostaLogin = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "32071c7f-32a2-48f7-b521-9118d7229ea2",
              "parentUUID": "71300e6f-7a56-4df7-af35-9343afc4f25d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aa49b406-e369-4b27-92c2-c161050956cc",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
              "file": "/test/rest/controller/expense/expenseController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e1d144fe-e301-4000-8ca3-789caa443a91",
                  "parentUUID": "aa49b406-e369-4b27-92c2-c161050956cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "1df3299d-ef54-4d17-bcb5-f225cecdd477",
                  "parentUUID": "aa49b406-e369-4b27-92c2-c161050956cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "9e085329-a8a8-4b88-a2a0-c13b8c072dfb",
                  "parentUUID": "aa49b406-e369-4b27-92c2-c161050956cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense Controller POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "c3f2f289-4e20-4a9f-8e1c-53da4700b5d5",
                  "parentUUID": "aa49b406-e369-4b27-92c2-c161050956cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1d144fe-e301-4000-8ca3-789caa443a91",
                "1df3299d-ef54-4d17-bcb5-f225cecdd477",
                "9e085329-a8a8-4b88-a2a0-c13b8c072dfb",
                "c3f2f289-4e20-4a9f-8e1c-53da4700b5d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "770635a5-544a-47e2-9a41-f0a7e1c44029",
              "title": "PUT /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseController.test.js",
              "file": "/test/rest/controller/expense/expenseController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e2413545-0b46-416a-ae00-b2c6563fd6e9",
                  "parentUUID": "770635a5-544a-47e2-9a41-f0a7e1c44029",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "61ee2c04-1356-4a25-9f4a-ecad3ad82cde",
                  "parentUUID": "770635a5-544a-47e2-9a41-f0a7e1c44029",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "b3de92bf-814b-4277-a69b-d2768f8886b3",
                  "parentUUID": "770635a5-544a-47e2-9a41-f0a7e1c44029",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor zero",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando o valor zero",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ca08b05d-79cf-4e84-94a8-38ab1b8f6dd4",
                  "parentUUID": "770635a5-544a-47e2-9a41-f0a7e1c44029",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller PUT /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "7e70924e-64af-4b60-bfa8-5a6d7930f5bb",
                  "parentUUID": "770635a5-544a-47e2-9a41-f0a7e1c44029",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense Controller PUT /expenses Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "7f826e80-66d8-4e9a-8ab7-c1b57857e636",
                  "parentUUID": "770635a5-544a-47e2-9a41-f0a7e1c44029",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2413545-0b46-416a-ae00-b2c6563fd6e9",
                "61ee2c04-1356-4a25-9f4a-ecad3ad82cde",
                "b3de92bf-814b-4277-a69b-d2768f8886b3",
                "ca08b05d-79cf-4e84-94a8-38ab1b8f6dd4",
                "7e70924e-64af-4b60-bfa8-5a6d7930f5bb",
                "7f826e80-66d8-4e9a-8ab7-c1b57857e636"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9ca739ed-7a84-4692-9453-d57cca9434d7",
          "title": "Expense Controller - Mocked",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
          "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense Controller - Mocked\"",
              "fullTitle": "Expense Controller - Mocked \"before all\" hook in \"Expense Controller - Mocked\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app).post(\"/users/login\").send(loginRequest);\ntoken = response.body.token;",
              "err": {},
              "uuid": "feeae026-1d10-49be-ab3f-cdb8ef68887f",
              "parentUUID": "9ca739ed-7a84-4692-9453-d57cca9434d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Expense Controller - Mocked\"",
              "fullTitle": "Expense Controller - Mocked \"after each\" hook in \"Expense Controller - Mocked\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "6b02f97f-715c-45ac-b930-00319d49f052",
              "parentUUID": "9ca739ed-7a84-4692-9453-d57cca9434d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "9f22a389-9219-48f1-bff8-bcd3243bef24",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
              "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "6dced268-c207-43df-beb4-577057c41334",
                  "parentUUID": "9f22a389-9219-48f1-bff8-bcd3243bef24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "27591759-1b02-4435-83c0-e38d198c6f44",
                  "parentUUID": "9f22a389-9219-48f1-bff8-bcd3243bef24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "da76d0bc-3d93-48dc-a617-0a28ccea7a00",
                  "parentUUID": "9f22a389-9219-48f1-bff8-bcd3243bef24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense Controller - Mocked POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nconst expenseServiceMock = sinon.stub(expenseService, \"addExpense\");\nexpenseServiceMock.returns(expectedResponse.body);\nconst response = await request(app)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "8fbe9248-6a63-4ce7-9f5e-8fe25d81ddcb",
                  "parentUUID": "9f22a389-9219-48f1-bff8-bcd3243bef24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6dced268-c207-43df-beb4-577057c41334",
                "27591759-1b02-4435-83c0-e38d198c6f44",
                "da76d0bc-3d93-48dc-a617-0a28ccea7a00",
                "8fbe9248-6a63-4ce7-9f5e-8fe25d81ddcb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ac6260d6-4167-42b2-aaa5-25372d2ef4dd",
              "title": "PUT /expenses/:id",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/expense/expenseControllerMocked.test.js",
              "file": "/test/rest/controller/expense/expenseControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "3c059664-efeb-444d-96a7-518c42d185f5",
                  "parentUUID": "ac6260d6-4167-42b2-aaa5-25372d2ef4dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "fc9ab98f-902b-4bf1-8de3-d0c5822723fb",
                  "parentUUID": "ac6260d6-4167-42b2-aaa5-25372d2ef4dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "8a45232d-99cf-4a57-88d7-0ba356dbb2bb",
                  "parentUUID": "ac6260d6-4167-42b2-aaa5-25372d2ef4dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor zero",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando o valor zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "82d0c206-2e95-4e02-8d51-5a9ea3415c9c",
                  "parentUUID": "ac6260d6-4167-42b2-aaa5-25372d2ef4dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.throws(error);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "8828829c-d095-40f7-a255-7ae9c39f189c",
                  "parentUUID": "ac6260d6-4167-42b2-aaa5-25372d2ef4dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve atualizar despesa com sucesso",
                  "fullTitle": "Expense Controller - Mocked PUT /expenses/:id Deve atualizar despesa com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nconst expenseServiceMock = sinon.stub(expenseService, \"editExpense\");\nexpenseServiceMock.returns(expectedResponse.body);\nconst response = await request(app)\n  .put(\"/expenses/1\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "8c9d4a54-7992-4ee6-8101-4ae4e1115b88",
                  "parentUUID": "ac6260d6-4167-42b2-aaa5-25372d2ef4dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c059664-efeb-444d-96a7-518c42d185f5",
                "fc9ab98f-902b-4bf1-8de3-d0c5822723fb",
                "8a45232d-99cf-4a57-88d7-0ba356dbb2bb",
                "82d0c206-2e95-4e02-8d51-5a9ea3415c9c",
                "8828829c-d095-40f7-a255-7ae9c39f189c",
                "8c9d4a54-7992-4ee6-8101-4ae4e1115b88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d685be92-aa0b-4d43-b612-877e2b6b787e",
          "title": "User Controller",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
          "file": "/test/rest/controller/user/userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6b61f3bc-6271-4c79-a934-dfefcd53d1fd",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
              "file": "/test/rest/controller/user/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "42706555-fe8b-4104-aed3-fa955a3b97f5",
                  "parentUUID": "6b61f3bc-6271-4c79-a934-dfefcd53d1fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "9f51bf58-bb73-4f3d-8ad4-ea84f728d722",
                  "parentUUID": "6b61f3bc-6271-4c79-a934-dfefcd53d1fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User Controller POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "2ec59e14-f962-4d2e-996e-df71fe2b16cc",
                  "parentUUID": "6b61f3bc-6271-4c79-a934-dfefcd53d1fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User Controller POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/register\")\n  .send({\n    username: `user${Math.random()}`,\n    password: \"password\",\n  });\nconst expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "68a778a5-4ef5-40c3-82a6-34c778638af2",
                  "parentUUID": "6b61f3bc-6271-4c79-a934-dfefcd53d1fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42706555-fe8b-4104-aed3-fa955a3b97f5",
                "9f51bf58-bb73-4f3d-8ad4-ea84f728d722",
                "2ec59e14-f962-4d2e-996e-df71fe2b16cc",
                "68a778a5-4ef5-40c3-82a6-34c778638af2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4756e7dd-7be0-4f1b-8323-666b94d66dbe",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userController.test.js",
              "file": "/test/rest/controller/user/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "3b737e9d-1217-490a-ba6e-e12600689ac6",
                  "parentUUID": "4756e7dd-7be0-4f1b-8323-666b94d66dbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "cb277028-46d6-4bb2-b6e4-75961aa2ac58",
                  "parentUUID": "4756e7dd-7be0-4f1b-8323-666b94d66dbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "82bf50fd-2b9d-4aae-8b29-38d25b3bc3b1",
                  "parentUUID": "4756e7dd-7be0-4f1b-8323-666b94d66dbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User Controller POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "af34cd48-f792-44a4-94f6-aa0ee9456139",
                  "parentUUID": "4756e7dd-7be0-4f1b-8323-666b94d66dbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User Controller POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "2458e2b5-6b46-4bb6-8403-f60683564621",
                  "parentUUID": "4756e7dd-7be0-4f1b-8323-666b94d66dbe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b737e9d-1217-490a-ba6e-e12600689ac6",
                "cb277028-46d6-4bb2-b6e4-75961aa2ac58",
                "82bf50fd-2b9d-4aae-8b29-38d25b3bc3b1",
                "af34cd48-f792-44a4-94f6-aa0ee9456139",
                "2458e2b5-6b46-4bb6-8403-f60683564621"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 50,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6c04ca01-7212-42f8-8d3a-0a48905c163f",
          "title": "User Controller - Mocked",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
          "file": "/test/rest/controller/user/userControllerMocked.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Controller - Mocked\"",
              "fullTitle": "User Controller - Mocked \"after each\" hook in \"User Controller - Mocked\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "348c0f34-c4a9-42a6-957d-a72cec085530",
              "parentUUID": "6c04ca01-7212-42f8-8d3a-0a48905c163f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "660804da-a918-4341-8e63-3bd266b80978",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
              "file": "/test/rest/controller/user/userControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "d180834b-ef21-4118-acd3-bbdb14c9d166",
                  "parentUUID": "660804da-a918-4341-8e63-3bd266b80978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "3c2c4311-2b57-4ee0-92af-febd836a5088",
                  "parentUUID": "660804da-a918-4341-8e63-3bd266b80978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "70711fb9-f86e-4066-80ce-a9b18a3d84d4",
                  "parentUUID": "660804da-a918-4341-8e63-3bd266b80978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User Controller - Mocked POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nconst userServiceMock = sinon.stub(userService, \"registerUser\");\nuserServiceMock.returns({\n  message: expectedResponse.body.message,\n  user: { username: \"user\", password: \"password\" },\n});\nconst response = await request(app).post(\"/users/register\").send({\n  username: \"username\",\n  password: \"password\",\n});\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "ed35041d-07fd-4f75-b48d-fb2a2baaad4e",
                  "parentUUID": "660804da-a918-4341-8e63-3bd266b80978",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d180834b-ef21-4118-acd3-bbdb14c9d166",
                "3c2c4311-2b57-4ee0-92af-febd836a5088",
                "70711fb9-f86e-4066-80ce-a9b18a3d84d4",
                "ed35041d-07fd-4f75-b48d-fb2a2baaad4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7aaefdd9-4c7f-461e-af82-79e447dd5467",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/controller/user/userControllerMocked.test.js",
              "file": "/test/rest/controller/user/userControllerMocked.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "16dd9cff-53b0-4359-9fcd-e9ac0db59fce",
                  "parentUUID": "7aaefdd9-4c7f-461e-af82-79e447dd5467",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "8b50310a-fa26-40a2-9306-7777b6541ae6",
                  "parentUUID": "7aaefdd9-4c7f-461e-af82-79e447dd5467",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "6f0a849d-37c0-44b5-b989-f1d9f20c5c31",
                  "parentUUID": "7aaefdd9-4c7f-461e-af82-79e447dd5467",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(test.expectedMessage);\nerror.status = test.statusCode;\nconst userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.throws(error);\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "16fe1ae8-5773-4b61-b58a-f60b481c9035",
                  "parentUUID": "7aaefdd9-4c7f-461e-af82-79e447dd5467",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User Controller - Mocked POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceMock = sinon.stub(userService, \"validateUser\");\nuserServiceMock.returns({\n  token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.mocktoken\",\n});\nconst loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(app)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "9ed17a9b-8861-4430-a674-2b354b1ed935",
                  "parentUUID": "7aaefdd9-4c7f-461e-af82-79e447dd5467",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16dd9cff-53b0-4359-9fcd-e9ac0db59fce",
                "8b50310a-fa26-40a2-9306-7777b6541ae6",
                "6f0a849d-37c0-44b5-b989-f1d9f20c5c31",
                "16fe1ae8-5773-4b61-b58a-f60b481c9035",
                "9ed17a9b-8861-4430-a674-2b354b1ed935"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": "false"
      },
      "version": "6.3.0"
    }
  }
}