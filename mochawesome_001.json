{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T21:00:20.271Z",
    "end": "2025-09-19T21:00:20.531Z",
    "duration": 260,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "404b8555-ee14-4db2-a1fe-b5f0315c44e3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6d45e715-f553-408f-8438-4e59b66e3107",
          "title": "Expense External - HTTP Rest",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/expense/expenseExternal.rest.test.js",
          "file": "/test/rest/external/expense/expenseExternal.rest.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense External - HTTP Rest\"",
              "fullTitle": "Expense External - HTTP Rest \"before all\" hook in \"Expense External - HTTP Rest\"",
              "timedOut": false,
              "duration": 62,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst respostaLogin = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(loginRequest);\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "8cf30af5-f057-4234-b229-b746db4e2267",
              "parentUUID": "6d45e715-f553-408f-8438-4e59b66e3107",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "98ac730c-27bf-428d-adb3-2357d782149c",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/expense/expenseExternal.rest.test.js",
              "file": "/test/rest/external/expense/expenseExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "60f2f26a-f589-426c-a7c0-061c22f2e867",
                  "parentUUID": "98ac730c-27bf-428d-adb3-2357d782149c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "3ea823be-51c9-45ff-8db7-b15cdecd94de",
                  "parentUUID": "98ac730c-27bf-428d-adb3-2357d782149c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "19b58070-e68c-47e9-8349-a3330462bd5c",
                  "parentUUID": "98ac730c-27bf-428d-adb3-2357d782149c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a inclusão de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando a inclusão de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .send(expenseRequest);\nexpect(response.status).to.equal(401);\nexpect(response.body.message).to.equal(\"Token não fornecido\");",
                  "err": {},
                  "uuid": "2f0d5b33-ba77-4a57-9065-74231cabde2c",
                  "parentUUID": "98ac730c-27bf-428d-adb3-2357d782149c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding([\"date\", \"id\"])\n  .to.deep.equal(expectedResponse.body);\nexpenseId = response.body.id;",
                  "err": {},
                  "uuid": "8d09e3da-ecab-4294-a3e2-2f0123a32d7f",
                  "parentUUID": "98ac730c-27bf-428d-adb3-2357d782149c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60f2f26a-f589-426c-a7c0-061c22f2e867",
                "3ea823be-51c9-45ff-8db7-b15cdecd94de",
                "19b58070-e68c-47e9-8349-a3330462bd5c",
                "2f0d5b33-ba77-4a57-9065-74231cabde2c",
                "8d09e3da-ecab-4294-a3e2-2f0123a32d7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "699ca366-8835-4fe6-97fe-52381cda17f3",
              "title": "PUT /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/expense/expenseExternal.rest.test.js",
              "file": "/test/rest/external/expense/expenseExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "d18a6e6d-f152-421a-9941-6e7c67c0fd37",
                  "parentUUID": "699ca366-8835-4fe6-97fe-52381cda17f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "8902077b-a428-4cfb-a59e-25ed38755641",
                  "parentUUID": "699ca366-8835-4fe6-97fe-52381cda17f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "86e01b4f-fe60-4926-b5a0-bdb9c3703356",
                  "parentUUID": "699ca366-8835-4fe6-97fe-52381cda17f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor for igual a zero",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando o valor for igual a zero",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "20a8b035-6a7e-4776-9fe6-7860c595d056",
                  "parentUUID": "699ca366-8835-4fe6-97fe-52381cda17f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ba559741-3ea8-4f9d-89f2-b851c475b26a",
                  "parentUUID": "699ca366-8835-4fe6-97fe-52381cda17f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(401);\nexpect(response.body.message).to.equal(\"Token não fornecido\");",
                  "err": {},
                  "uuid": "54137115-acab-43af-89e8-e0d2db7ef525",
                  "parentUUID": "699ca366-8835-4fe6-97fe-52381cda17f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "818d5500-4c98-4a62-ad3e-98315102bdb2",
                  "parentUUID": "699ca366-8835-4fe6-97fe-52381cda17f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d18a6e6d-f152-421a-9941-6e7c67c0fd37",
                "8902077b-a428-4cfb-a59e-25ed38755641",
                "86e01b4f-fe60-4926-b5a0-bdb9c3703356",
                "20a8b035-6a7e-4776-9fe6-7860c595d056",
                "ba559741-3ea8-4f9d-89f2-b851c475b26a",
                "54137115-acab-43af-89e8-e0d2db7ef525",
                "818d5500-4c98-4a62-ad3e-98315102bdb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5af6376b-9961-464c-9392-d0923b534770",
          "title": "User External - HTTP Rest",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/user/userExternal.rest.test.js",
          "file": "/test/rest/external/user/userExternal.rest.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6cf954a9-1112-4706-9832-e233254107f0",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/user/userExternal.rest.test.js",
              "file": "/test/rest/external/user/userExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "f15e2f48-4f05-4801-9efb-86963778adfb",
                  "parentUUID": "6cf954a9-1112-4706-9832-e233254107f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "40018681-bda9-4f60-b25e-526f9b94bee1",
                  "parentUUID": "6cf954a9-1112-4706-9832-e233254107f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "faead20a-d502-4fe5-a05e-d8625ceb04ca",
                  "parentUUID": "6cf954a9-1112-4706-9832-e233254107f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send({\n    username: `user${Math.random()}`,\n    password: \"password\",\n  });\nconst expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "714c5476-6f10-47fb-add7-15ea1fe94896",
                  "parentUUID": "6cf954a9-1112-4706-9832-e233254107f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f15e2f48-4f05-4801-9efb-86963778adfb",
                "40018681-bda9-4f60-b25e-526f9b94bee1",
                "faead20a-d502-4fe5-a05e-d8625ceb04ca",
                "714c5476-6f10-47fb-add7-15ea1fe94896"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "29076043-adae-40e4-b807-2da37886f246",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/user/userExternal.rest.test.js",
              "file": "/test/rest/external/user/userExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "2e8779d2-fcd2-4dc0-85a0-6ec3e94a6c05",
                  "parentUUID": "29076043-adae-40e4-b807-2da37886f246",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "f7761005-8158-40d3-acf7-ca5e724c2c17",
                  "parentUUID": "29076043-adae-40e4-b807-2da37886f246",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "b5432ead-3da3-4f23-9e9c-20c659a0364e",
                  "parentUUID": "29076043-adae-40e4-b807-2da37886f246",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ed01636d-73c6-4e54-ad5e-0ec5e784735b",
                  "parentUUID": "29076043-adae-40e4-b807-2da37886f246",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "a0e9dbec-48f0-4332-940a-a0be88d82c3f",
                  "parentUUID": "29076043-adae-40e4-b807-2da37886f246",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e8779d2-fcd2-4dc0-85a0-6ec3e94a6c05",
                "f7761005-8158-40d3-acf7-ca5e724c2c17",
                "b5432ead-3da3-4f23-9e9c-20c659a0364e",
                "ed01636d-73c6-4e54-ad5e-0ec5e784735b",
                "a0e9dbec-48f0-4332-940a-a0be88d82c3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 50,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": "false"
      },
      "version": "6.3.0"
    }
  }
}