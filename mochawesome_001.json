{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T18:16:39.805Z",
    "end": "2025-09-19T18:16:40.046Z",
    "duration": 241,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "634ce561-a24d-4751-82f0-ea273b23ae04",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5aa18946-d7ed-4898-b52c-c74fd2e75258",
          "title": "Expense External - HTTP Rest",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/expense/expenseExternal.rest.test.js",
          "file": "/test/rest/external/expense/expenseExternal.rest.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense External - HTTP Rest\"",
              "fullTitle": "Expense External - HTTP Rest \"before all\" hook in \"Expense External - HTTP Rest\"",
              "timedOut": false,
              "duration": 52,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst respostaLogin = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(loginRequest);\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "8c095294-ec3d-433a-bf0e-88f5daa0934d",
              "parentUUID": "5aa18946-d7ed-4898-b52c-c74fd2e75258",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9bb03b30-707a-4339-bb87-1e45b4db5a6e",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/expense/expenseExternal.rest.test.js",
              "file": "/test/rest/external/expense/expenseExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "0e58545b-bf80-43d6-8ba2-2490ed9317d5",
                  "parentUUID": "9bb03b30-707a-4339-bb87-1e45b4db5a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "00bf5fa2-f7a0-406f-8b81-6c59510ed561",
                  "parentUUID": "9bb03b30-707a-4339-bb87-1e45b4db5a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "073b8b27-aa8d-46f5-8b3f-48d26283d129",
                  "parentUUID": "9bb03b30-707a-4339-bb87-1e45b4db5a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a inclusão de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando a inclusão de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .send(expenseRequest);\nexpect(response.status).to.equal(401);\nexpect(response.body.message).to.equal(\"Token não fornecido\");",
                  "err": {},
                  "uuid": "1994d994-fd12-44ff-8408-edebeb083439",
                  "parentUUID": "9bb03b30-707a-4339-bb87-1e45b4db5a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding([\"date\", \"id\"])\n  .to.deep.equal(expectedResponse.body);\nexpenseId = response.body.id;",
                  "err": {},
                  "uuid": "18e19198-9935-47f8-a4e0-59b3f0d6fa71",
                  "parentUUID": "9bb03b30-707a-4339-bb87-1e45b4db5a6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e58545b-bf80-43d6-8ba2-2490ed9317d5",
                "00bf5fa2-f7a0-406f-8b81-6c59510ed561",
                "073b8b27-aa8d-46f5-8b3f-48d26283d129",
                "1994d994-fd12-44ff-8408-edebeb083439",
                "18e19198-9935-47f8-a4e0-59b3f0d6fa71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2e24ff39-fa86-48eb-a09d-225a8e293427",
              "title": "PUT /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/expense/expenseExternal.rest.test.js",
              "file": "/test/rest/external/expense/expenseExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "72d230ba-9ecc-40e8-a5f0-c7779ab38a35",
                  "parentUUID": "2e24ff39-fa86-48eb-a09d-225a8e293427",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "aa726ff6-5172-427a-8ff7-a786a0907646",
                  "parentUUID": "2e24ff39-fa86-48eb-a09d-225a8e293427",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "597001ed-0bc5-4aa3-b658-83b47c7777c4",
                  "parentUUID": "2e24ff39-fa86-48eb-a09d-225a8e293427",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor zero",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando o valor zero",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "57f09738-0e2e-4f96-aa39-feaf7c9ef660",
                  "parentUUID": "2e24ff39-fa86-48eb-a09d-225a8e293427",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "2d0782c2-a728-444e-94fe-964b0609caa6",
                  "parentUUID": "2e24ff39-fa86-48eb-a09d-225a8e293427",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(401);\nexpect(response.body.message).to.equal(\"Token não fornecido\");",
                  "err": {},
                  "uuid": "dc052d14-3cbd-492f-af5d-dfa168d36634",
                  "parentUUID": "2e24ff39-fa86-48eb-a09d-225a8e293427",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "635411e7-e748-44e5-a268-b323ae1d0836",
                  "parentUUID": "2e24ff39-fa86-48eb-a09d-225a8e293427",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72d230ba-9ecc-40e8-a5f0-c7779ab38a35",
                "aa726ff6-5172-427a-8ff7-a786a0907646",
                "597001ed-0bc5-4aa3-b658-83b47c7777c4",
                "57f09738-0e2e-4f96-aa39-feaf7c9ef660",
                "2d0782c2-a728-444e-94fe-964b0609caa6",
                "dc052d14-3cbd-492f-af5d-dfa168d36634",
                "635411e7-e748-44e5-a268-b323ae1d0836"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "78f2ba66-8fee-4347-a12a-20c54fef480e",
          "title": "User External - HTTP Rest",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/user/userExternal.rest.test.js",
          "file": "/test/rest/external/user/userExternal.rest.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0069eb2c-8ba2-4a45-a8d6-7bc3def56036",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/user/userExternal.rest.test.js",
              "file": "/test/rest/external/user/userExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "d6cba7ef-96cd-43d5-8698-8e8a29b9f4ba",
                  "parentUUID": "0069eb2c-8ba2-4a45-a8d6-7bc3def56036",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "29490e00-12ec-42e8-868a-808d3d4fbdee",
                  "parentUUID": "0069eb2c-8ba2-4a45-a8d6-7bc3def56036",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "952f6209-d4dc-4d13-8809-fbcd45b57670",
                  "parentUUID": "0069eb2c-8ba2-4a45-a8d6-7bc3def56036",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send({\n    username: `user${Math.random()}`,\n    password: \"password\",\n  });\nconst expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "d87de645-cb6b-4c8e-a905-d906cc0a41cf",
                  "parentUUID": "0069eb2c-8ba2-4a45-a8d6-7bc3def56036",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6cba7ef-96cd-43d5-8698-8e8a29b9f4ba",
                "29490e00-12ec-42e8-868a-808d3d4fbdee",
                "952f6209-d4dc-4d13-8809-fbcd45b57670",
                "d87de645-cb6b-4c8e-a905-d906cc0a41cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e3e7453e-ac38-439c-aa30-f3cbe0d4fac4",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/user/userExternal.rest.test.js",
              "file": "/test/rest/external/user/userExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "68c4d44e-658e-48a2-ab62-bec1db126afd",
                  "parentUUID": "e3e7453e-ac38-439c-aa30-f3cbe0d4fac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "23f7be1c-1b29-498d-98af-04a6093b5291",
                  "parentUUID": "e3e7453e-ac38-439c-aa30-f3cbe0d4fac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e64e31ac-4b7f-415a-9734-6f39365aa27c",
                  "parentUUID": "e3e7453e-ac38-439c-aa30-f3cbe0d4fac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c6b449de-1c5c-48c8-88df-d16b436a6b40",
                  "parentUUID": "e3e7453e-ac38-439c-aa30-f3cbe0d4fac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "7e350d68-a5bc-4c1c-8460-3c71078c0a38",
                  "parentUUID": "e3e7453e-ac38-439c-aa30-f3cbe0d4fac4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68c4d44e-658e-48a2-ab62-bec1db126afd",
                "23f7be1c-1b29-498d-98af-04a6093b5291",
                "e64e31ac-4b7f-415a-9734-6f39365aa27c",
                "c6b449de-1c5c-48c8-88df-d16b436a6b40",
                "7e350d68-a5bc-4c1c-8460-3c71078c0a38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": "false"
      },
      "version": "6.3.0"
    }
  }
}