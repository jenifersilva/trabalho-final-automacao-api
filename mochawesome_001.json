{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T18:14:28.346Z",
    "end": "2025-09-19T18:14:28.594Z",
    "duration": 248,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e33f3696-1287-4bc0-aff6-97834c5be280",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d9abfb24-117d-4f39-8751-22a45c77a81c",
          "title": "Expense External - HTTP Rest",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/expense/expenseExternal.rest.test.js",
          "file": "/test/rest/external/expense/expenseExternal.rest.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense External - HTTP Rest\"",
              "fullTitle": "Expense External - HTTP Rest \"before all\" hook in \"Expense External - HTTP Rest\"",
              "timedOut": false,
              "duration": 55,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst respostaLogin = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(loginRequest);\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "6ef4602b-da45-40e2-a737-d224783f52dc",
              "parentUUID": "d9abfb24-117d-4f39-8751-22a45c77a81c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "24a6c6bf-22c5-442a-85e4-4ebcca3ca99c",
              "title": "POST /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/expense/expenseExternal.rest.test.js",
              "file": "/test/rest/external/expense/expenseExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "b601889c-4beb-4e69-b3f2-4a73351e2b1a",
                  "parentUUID": "24a6c6bf-22c5-442a-85e4-4ebcca3ca99c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "dd3460b5-611d-4a04-809c-540d063be9c0",
                  "parentUUID": "24a6c6bf-22c5-442a-85e4-4ebcca3ca99c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.createExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "72741b1b-c950-430f-acef-449e84003a2b",
                  "parentUUID": "24a6c6bf-22c5-442a-85e4-4ebcca3ca99c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a inclusão de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve retornar erro quando a inclusão de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .send(expenseRequest);\nexpect(response.status).to.equal(401);\nexpect(response.body.message).to.equal(\"Token não fornecido\");",
                  "err": {},
                  "uuid": "96b89485-8e6b-4cc0-b236-751ab9628743",
                  "parentUUID": "24a6c6bf-22c5-442a-85e4-4ebcca3ca99c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense External - HTTP Rest POST /expenses Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .post(\"/expenses\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding([\"date\", \"id\"])\n  .to.deep.equal(expectedResponse.body);\nexpenseId = response.body.id;",
                  "err": {},
                  "uuid": "f9024d4a-3111-4057-ab3c-b11f6abec931",
                  "parentUUID": "24a6c6bf-22c5-442a-85e4-4ebcca3ca99c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b601889c-4beb-4e69-b3f2-4a73351e2b1a",
                "dd3460b5-611d-4a04-809c-540d063be9c0",
                "72741b1b-c950-430f-acef-449e84003a2b",
                "96b89485-8e6b-4cc0-b236-751ab9628743",
                "f9024d4a-3111-4057-ab3c-b11f6abec931"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "11ff6d93-674f-418d-82bc-b2d737e7c935",
              "title": "PUT /expenses",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/expense/expenseExternal.rest.test.js",
              "file": "/test/rest/external/expense/expenseExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "2c30e52e-d6d3-4270-9f4a-0ac5caf51e4b",
                  "parentUUID": "11ff6d93-674f-418d-82bc-b2d737e7c935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "8e0626f0-7974-4555-ad19-15d160a8218a",
                  "parentUUID": "11ff6d93-674f-418d-82bc-b2d737e7c935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "7651d748-9513-4e87-9720-c52cd97aad46",
                  "parentUUID": "11ff6d93-674f-418d-82bc-b2d737e7c935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor zero",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando o valor zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e40bf983-9f8e-45f5-924a-6e64329efa11",
                  "parentUUID": "11ff6d93-674f-418d-82bc-b2d737e7c935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "23093a26-1233-4a9c-be3e-33324849f078",
                  "parentUUID": "11ff6d93-674f-418d-82bc-b2d737e7c935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .send(expenseRequest);\nexpect(response.status).to.equal(401);\nexpect(response.body.message).to.equal(\"Token não fornecido\");",
                  "err": {},
                  "uuid": "dfc3959c-5ab3-4f83-8b6b-8a732aeff835",
                  "parentUUID": "11ff6d93-674f-418d-82bc-b2d737e7c935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense External - HTTP Rest PUT /expenses Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expenseRequest = require(\"../../fixture/requests/expense/expenseRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .put(`/expenses/${expenseId}`)\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(expenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body)\n  .excluding(\"date\")\n  .to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "ddbdc38d-9849-4e6b-9a56-8613ef120ac9",
                  "parentUUID": "11ff6d93-674f-418d-82bc-b2d737e7c935",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c30e52e-d6d3-4270-9f4a-0ac5caf51e4b",
                "8e0626f0-7974-4555-ad19-15d160a8218a",
                "7651d748-9513-4e87-9720-c52cd97aad46",
                "e40bf983-9f8e-45f5-924a-6e64329efa11",
                "23093a26-1233-4a9c-be3e-33324849f078",
                "dfc3959c-5ab3-4f83-8b6b-8a732aeff835",
                "ddbdc38d-9849-4e6b-9a56-8613ef120ac9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c39e2066-b833-4d38-b9eb-fbb7da9d224e",
          "title": "User External - HTTP Rest",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/user/userExternal.rest.test.js",
          "file": "/test/rest/external/user/userExternal.rest.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a8957b51-09b1-42b5-842e-e454ae88ddb6",
              "title": "POST /users/register",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/user/userExternal.rest.test.js",
              "file": "/test/rest/external/user/userExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "6706c600-4096-45a3-940b-52bae62c89fd",
                  "parentUUID": "a8957b51-09b1-42b5-842e-e454ae88ddb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "320f9091-dc22-4128-a18a-76cfe4063a90",
                  "parentUUID": "a8957b51-09b1-42b5-842e-e454ae88ddb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "48133eae-c857-49a3-8a10-a30e430271f0",
                  "parentUUID": "a8957b51-09b1-42b5-842e-e454ae88ddb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User External - HTTP Rest POST /users/register Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/register\")\n  .send({\n    username: `user${Math.random()}`,\n    password: \"password\",\n  });\nconst expectedResponse = require(\"../../fixture/responses/user/createUserResponseSuccessful.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body).to.deep.equal(expectedResponse.body);",
                  "err": {},
                  "uuid": "79488cb4-b479-4791-8196-6d7de22acf53",
                  "parentUUID": "a8957b51-09b1-42b5-842e-e454ae88ddb6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6706c600-4096-45a3-940b-52bae62c89fd",
                "320f9091-dc22-4128-a18a-76cfe4063a90",
                "48133eae-c857-49a3-8a10-a30e430271f0",
                "79488cb4-b479-4791-8196-6d7de22acf53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "5f95ca54-a45e-473d-a73a-36ab1ae584b5",
              "title": "POST /users/login",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/rest/external/user/userExternal.rest.test.js",
              "file": "/test/rest/external/user/userExternal.rest.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "374fe44e-29b8-4f75-ab36-d5f882f49ba5",
                  "parentUUID": "5f95ca54-a45e-473d-a73a-36ab1ae584b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "3bc57897-69f8-4760-9bf5-c53905bd38fd",
                  "parentUUID": "5f95ca54-a45e-473d-a73a-36ab1ae584b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "68693d6b-8d4e-42dc-beea-916832248952",
                  "parentUUID": "5f95ca54-a45e-473d-a73a-36ab1ae584b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(test.loginUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "fed73892-c408-479e-ad10-1f56dd234022",
                  "parentUUID": "5f95ca54-a45e-473d-a73a-36ab1ae584b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User External - HTTP Rest POST /users/login Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_REST)\n  .post(\"/users/login\")\n  .send(loginRequest);\nexpect(response.status).to.equal(200);\nexpect(response.body.token).to.be.not.null;",
                  "err": {},
                  "uuid": "0c922038-318b-484a-9f2b-4f9c02cb0d88",
                  "parentUUID": "5f95ca54-a45e-473d-a73a-36ab1ae584b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "374fe44e-29b8-4f75-ab36-d5f882f49ba5",
                "3bc57897-69f8-4760-9bf5-c53905bd38fd",
                "68693d6b-8d4e-42dc-beea-916832248952",
                "fed73892-c408-479e-ad10-1f56dd234022",
                "0c922038-318b-484a-9f2b-4f9c02cb0d88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 51,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": "false"
      },
      "version": "6.3.0"
    }
  }
}