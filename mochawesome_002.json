{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T21:03:38.262Z",
    "end": "2025-09-19T21:03:38.528Z",
    "duration": 266,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8f946b48-d6e4-4811-906e-85ecb8c343fe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "56ca39e6-7c53-479f-be87-810c673baf05",
          "title": "Expense External - GraphQL",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
          "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense External - GraphQL\"",
              "fullTitle": "Expense External - GraphQL \"before all\" hook in \"Expense External - GraphQL\"",
              "timedOut": false,
              "duration": 62,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(loginRequest);\ntoken = response.body.data.login.token;",
              "err": {},
              "uuid": "745050bd-ead5-41a3-abfc-c1f3f08a4c98",
              "parentUUID": "56ca39e6-7c53-479f-be87-810c673baf05",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "16624054-c860-47ec-8f44-b78815f1f4dd",
              "title": "addExpense Mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "93c524b6-06c1-430a-a5e3-9cce58d8a8b6",
                  "parentUUID": "16624054-c860-47ec-8f44-b78815f1f4dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "4c43a914-e76c-4021-a76f-e9bcbdef102b",
                  "parentUUID": "16624054-c860-47ec-8f44-b78815f1f4dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "5bade2e7-9b11-4031-87ab-46771e4963c5",
                  "parentUUID": "16624054-c860-47ec-8f44-b78815f1f4dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a inclusão de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a inclusão de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(createExpenseRequest);\nexpect(response.body.errors[0].message).to.equal(\"Not authenticated\");",
                  "err": {},
                  "uuid": "fd3f01e7-16bd-4b9b-95d6-affad410ca94",
                  "parentUUID": "16624054-c860-47ec-8f44-b78815f1f4dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(createExpenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body.data.addExpense)\n  .excluding([\"date\", \"id\"])\n  .to.deep.equal(expectedResponse.data.addExpense);\nexpenseId = response.body.data.addExpense.id;",
                  "err": {},
                  "uuid": "d1622067-9ecc-496e-8e79-7fc258fc380a",
                  "parentUUID": "16624054-c860-47ec-8f44-b78815f1f4dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93c524b6-06c1-430a-a5e3-9cce58d8a8b6",
                "4c43a914-e76c-4021-a76f-e9bcbdef102b",
                "5bade2e7-9b11-4031-87ab-46771e4963c5",
                "fd3f01e7-16bd-4b9b-95d6-affad410ca94",
                "d1622067-9ecc-496e-8e79-7fc258fc380a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "13d4ce40-750d-42a8-a008-33369d965492",
              "title": "editExpense Mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "bf81a726-edfe-4ff9-8439-639c75113023",
                  "parentUUID": "13d4ce40-750d-42a8-a008-33369d965492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "689ca343-5eac-4085-bf7a-23485d79eea1",
                  "parentUUID": "13d4ce40-750d-42a8-a008-33369d965492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ef0dbff9-7e96-4ce6-9c5b-6fabcdc67c55",
                  "parentUUID": "13d4ce40-750d-42a8-a008-33369d965492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor for igual a zero",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando o valor for igual a zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "845f1d99-f3b7-4b03-9d16-d2c8c44790b1",
                  "parentUUID": "13d4ce40-750d-42a8-a008-33369d965492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "3f54f7ec-a260-4402-aac0-3151be46c095",
                  "parentUUID": "13d4ce40-750d-42a8-a008-33369d965492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "editExpenseRequest.variables.id = expenseId;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(editExpenseRequest);\nexpect(response.body.errors[0].message).to.equal(\"Not authenticated\");",
                  "err": {},
                  "uuid": "27ccff36-9661-4f5b-a0d0-7df844c9a7f8",
                  "parentUUID": "13d4ce40-750d-42a8-a008-33369d965492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "editExpenseRequest.variables.id = expenseId;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(editExpenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body.data.editExpense).to.deep.equal(\n  expectedResponse.data.editExpense\n);",
                  "err": {},
                  "uuid": "a8e448f9-7fe5-44d3-b13b-1f8824b3ec00",
                  "parentUUID": "13d4ce40-750d-42a8-a008-33369d965492",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf81a726-edfe-4ff9-8439-639c75113023",
                "689ca343-5eac-4085-bf7a-23485d79eea1",
                "ef0dbff9-7e96-4ce6-9c5b-6fabcdc67c55",
                "845f1d99-f3b7-4b03-9d16-d2c8c44790b1",
                "3f54f7ec-a260-4402-aac0-3151be46c095",
                "27ccff36-9661-4f5b-a0d0-7df844c9a7f8",
                "a8e448f9-7fe5-44d3-b13b-1f8824b3ec00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d2c207fb-de83-46ff-ba39-d4bf5788c789",
          "title": "User External - GraphQL",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
          "file": "/test/graphql/external/user/userExternal.graphql.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "686909e1-6976-468a-bf5f-9d98d5d6bf32",
              "title": "register Mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
              "file": "/test/graphql/external/user/userExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - GraphQL register Mutation Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "8a98e0f3-ff5a-4d94-b50c-1d08a7820de8",
                  "parentUUID": "686909e1-6976-468a-bf5f-9d98d5d6bf32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - GraphQL register Mutation Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "79ddf9d0-9e9c-41c9-8d57-ce4b0ce9d87a",
                  "parentUUID": "686909e1-6976-468a-bf5f-9d98d5d6bf32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User External - GraphQL register Mutation Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "4014a629-8fb7-47d5-b12a-3a02609bc0fa",
                  "parentUUID": "686909e1-6976-468a-bf5f-9d98d5d6bf32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User External - GraphQL register Mutation Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const username = `user${Math.floor(Math.random() * 100000)}`;\nconst mutation = `mutation { register(username: \\\"${username}\\\", password: \\\"password\\\") { message } }`;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send({ query: mutation });\nexpect(response.body.data.register.message).to.equal(\n  \"Usuário registrado com sucesso\"\n);",
                  "err": {},
                  "uuid": "2d19411e-6a52-4db1-ad1c-1a363f523238",
                  "parentUUID": "686909e1-6976-468a-bf5f-9d98d5d6bf32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a98e0f3-ff5a-4d94-b50c-1d08a7820de8",
                "79ddf9d0-9e9c-41c9-8d57-ce4b0ce9d87a",
                "4014a629-8fb7-47d5-b12a-3a02609bc0fa",
                "2d19411e-6a52-4db1-ad1c-1a363f523238"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 93,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "23e99c4b-fdfc-40d4-a088-14824e3903ef",
              "title": "login Query",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
              "file": "/test/graphql/external/user/userExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - GraphQL login Query Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "8f705203-4bee-45d6-a8d8-56bea9946a37",
                  "parentUUID": "23e99c4b-fdfc-40d4-a088-14824e3903ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - GraphQL login Query Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "93238c16-ba59-4f28-8541-659d12d73edd",
                  "parentUUID": "23e99c4b-fdfc-40d4-a088-14824e3903ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User External - GraphQL login Query Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "a240c627-d9dd-4b9f-9ee5-a5f6944ed81b",
                  "parentUUID": "23e99c4b-fdfc-40d4-a088-14824e3903ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User External - GraphQL login Query Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "fda505b7-7069-4f52-a69f-2a03842c9d3d",
                  "parentUUID": "23e99c4b-fdfc-40d4-a088-14824e3903ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User External - GraphQL login Query Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(loginRequest);\nexpect(response.body.data.login.token).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "caebda4e-8238-4893-9ba9-06197a9fcb79",
                  "parentUUID": "23e99c4b-fdfc-40d4-a088-14824e3903ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f705203-4bee-45d6-a8d8-56bea9946a37",
                "93238c16-ba59-4f28-8541-659d12d73edd",
                "a240c627-d9dd-4b9f-9ee5-a5f6944ed81b",
                "fda505b7-7069-4f52-a69f-2a03842c9d3d",
                "caebda4e-8238-4893-9ba9-06197a9fcb79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": "false"
      },
      "version": "6.3.0"
    }
  }
}