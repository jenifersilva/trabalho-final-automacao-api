{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T21:01:23.245Z",
    "end": "2025-09-19T21:01:23.511Z",
    "duration": 266,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b2798e88-5ba9-489a-8d72-d67faf2b2b39",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c1b02b07-146a-4f5c-9b7a-a7e0bcd592f4",
          "title": "Expense External - GraphQL",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
          "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense External - GraphQL\"",
              "fullTitle": "Expense External - GraphQL \"before all\" hook in \"Expense External - GraphQL\"",
              "timedOut": false,
              "duration": 63,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(loginRequest);\ntoken = response.body.data.login.token;",
              "err": {},
              "uuid": "3b862ccd-bdc5-43d7-ac34-9e0465baf545",
              "parentUUID": "c1b02b07-146a-4f5c-9b7a-a7e0bcd592f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "270f0520-d0d7-4a0e-87b4-1bae8a460b5d",
              "title": "addExpense Mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "805931d9-ba6b-45ae-ad83-6bb658d6567e",
                  "parentUUID": "270f0520-d0d7-4a0e-87b4-1bae8a460b5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "c6649889-4451-4adc-a8ce-042446101742",
                  "parentUUID": "270f0520-d0d7-4a0e-87b4-1bae8a460b5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "0851e823-e5a6-4272-95ee-60f7c4c24213",
                  "parentUUID": "270f0520-d0d7-4a0e-87b4-1bae8a460b5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a inclusão de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a inclusão de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(createExpenseRequest);\nexpect(response.body.errors[0].message).to.equal(\"Not authenticated\");",
                  "err": {},
                  "uuid": "922dacd5-affe-4d13-96fd-7b66686a6c32",
                  "parentUUID": "270f0520-d0d7-4a0e-87b4-1bae8a460b5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(createExpenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body.data.addExpense)\n  .excluding([\"date\", \"id\"])\n  .to.deep.equal(expectedResponse.data.addExpense);\nexpenseId = response.body.data.addExpense.id;",
                  "err": {},
                  "uuid": "5fc30fce-1b5b-4caa-9114-c90dd6e2f69d",
                  "parentUUID": "270f0520-d0d7-4a0e-87b4-1bae8a460b5d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "805931d9-ba6b-45ae-ad83-6bb658d6567e",
                "c6649889-4451-4adc-a8ce-042446101742",
                "0851e823-e5a6-4272-95ee-60f7c4c24213",
                "922dacd5-affe-4d13-96fd-7b66686a6c32",
                "5fc30fce-1b5b-4caa-9114-c90dd6e2f69d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b54110ec-4811-4c10-886c-59fd5cf14995",
              "title": "editExpense Mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "5950b1e4-1178-4d03-b5ad-b9b992dc8315",
                  "parentUUID": "b54110ec-4811-4c10-886c-59fd5cf14995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "78bbbc5a-f328-47b2-b5f1-af6af80c7365",
                  "parentUUID": "b54110ec-4811-4c10-886c-59fd5cf14995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor menor que zero",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando o valor menor que zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "102e8a0b-2873-4d61-983d-5a127a9cc0bd",
                  "parentUUID": "b54110ec-4811-4c10-886c-59fd5cf14995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor for igual a zero",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando o valor for igual a zero",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "001dd60c-06a2-4f9f-b34c-d3c4bb69fa88",
                  "parentUUID": "b54110ec-4811-4c10-886c-59fd5cf14995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "da9c935f-0929-4e58-97b9-524edb7710d6",
                  "parentUUID": "b54110ec-4811-4c10-886c-59fd5cf14995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Use the dynamically created expense ID\neditExpenseRequest.variables.id = expenseId;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(editExpenseRequest);\nexpect(response.body.errors[0].message).to.equal(\"Not authenticated\");",
                  "err": {},
                  "uuid": "dfaccab3-18ba-48fa-9ea3-2762ebf05b18",
                  "parentUUID": "b54110ec-4811-4c10-886c-59fd5cf14995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense External - GraphQL editExpense Mutation Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Use the dynamically created expense ID\neditExpenseRequest.variables.id = expenseId;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(editExpenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body.data.editExpense).to.deep.equal(\n  expectedResponse.data.editExpense\n);",
                  "err": {},
                  "uuid": "862050d7-15c0-41fd-954c-ca9e8587af3e",
                  "parentUUID": "b54110ec-4811-4c10-886c-59fd5cf14995",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5950b1e4-1178-4d03-b5ad-b9b992dc8315",
                "78bbbc5a-f328-47b2-b5f1-af6af80c7365",
                "102e8a0b-2873-4d61-983d-5a127a9cc0bd",
                "001dd60c-06a2-4f9f-b34c-d3c4bb69fa88",
                "da9c935f-0929-4e58-97b9-524edb7710d6",
                "dfaccab3-18ba-48fa-9ea3-2762ebf05b18",
                "862050d7-15c0-41fd-954c-ca9e8587af3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "be10921f-eb39-4277-a8b6-3dc311290afd",
          "title": "User External - GraphQL",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
          "file": "/test/graphql/external/user/userExternal.graphql.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "41c0c639-d699-48e2-86a6-d4e602d85915",
              "title": "register Mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
              "file": "/test/graphql/external/user/userExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - GraphQL register Mutation Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "22fdccbd-6df3-4cd0-9d72-54b1c9a7ab24",
                  "parentUUID": "41c0c639-d699-48e2-86a6-d4e602d85915",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - GraphQL register Mutation Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "9fbca061-85ae-4726-8586-5e60b38290b7",
                  "parentUUID": "41c0c639-d699-48e2-86a6-d4e602d85915",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User External - GraphQL register Mutation Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "ee0e9726-3804-4e6c-aada-b2e43659b23e",
                  "parentUUID": "41c0c639-d699-48e2-86a6-d4e602d85915",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User External - GraphQL register Mutation Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const username = `user${Math.floor(Math.random() * 100000)}`;\nconst mutation = `mutation { register(username: \\\"${username}\\\", password: \\\"password\\\") { message } }`;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send({ query: mutation });\nexpect(response.body.data.register.message).to.equal(\n  \"Usuário registrado com sucesso\"\n);",
                  "err": {},
                  "uuid": "8a9ce37c-5c44-470a-b36c-7f336716b82c",
                  "parentUUID": "41c0c639-d699-48e2-86a6-d4e602d85915",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22fdccbd-6df3-4cd0-9d72-54b1c9a7ab24",
                "9fbca061-85ae-4726-8586-5e60b38290b7",
                "ee0e9726-3804-4e6c-aada-b2e43659b23e",
                "8a9ce37c-5c44-470a-b36c-7f336716b82c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "962731a8-6fdf-45a5-87fd-58f431bda1a4",
              "title": "login Query",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
              "file": "/test/graphql/external/user/userExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - GraphQL login Query Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "59b2aaff-24bf-456f-baef-f73964b6aeb4",
                  "parentUUID": "962731a8-6fdf-45a5-87fd-58f431bda1a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - GraphQL login Query Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "aeacaa75-7442-4388-9883-927a782f8009",
                  "parentUUID": "962731a8-6fdf-45a5-87fd-58f431bda1a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User External - GraphQL login Query Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "0902fe92-9eaf-4886-a711-5c05552b2bdd",
                  "parentUUID": "962731a8-6fdf-45a5-87fd-58f431bda1a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User External - GraphQL login Query Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "8af2b03e-ad60-4d29-ba1f-9c24b94a392d",
                  "parentUUID": "962731a8-6fdf-45a5-87fd-58f431bda1a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User External - GraphQL login Query Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(loginRequest);\nexpect(response.body.data.login.token).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "bfdaec1e-79ae-42ec-97e9-9ea591815c1c",
                  "parentUUID": "962731a8-6fdf-45a5-87fd-58f431bda1a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59b2aaff-24bf-456f-baef-f73964b6aeb4",
                "aeacaa75-7442-4388-9883-927a782f8009",
                "0902fe92-9eaf-4886-a711-5c05552b2bdd",
                "8af2b03e-ad60-4d29-ba1f-9c24b94a392d",
                "bfdaec1e-79ae-42ec-97e9-9ea591815c1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": "false"
      },
      "version": "6.3.0"
    }
  }
}