{
  "stats": {
    "suites": 6,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T17:35:43.888Z",
    "end": "2025-09-19T17:35:44.157Z",
    "duration": 269,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "179b462a-da56-4f33-902e-419108272e92",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3d8bd724-6a5d-45e0-8035-296041d3b8be",
          "title": "Expense External - GraphQL",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
          "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expense External - GraphQL\"",
              "fullTitle": "Expense External - GraphQL \"before all\" hook in \"Expense External - GraphQL\"",
              "timedOut": false,
              "duration": 66,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(loginRequest);\ntoken = response.body.data.login.token;",
              "err": {},
              "uuid": "67472ab6-bd05-478f-be1b-511cfa026140",
              "parentUUID": "3d8bd724-6a5d-45e0-8035-296041d3b8be",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a014b7f-ad2a-45dd-9079-e7eb36031ce5",
              "title": "addExpense Mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "0b09669c-8855-4149-b6c6-e7c64a0de1cd",
                  "parentUUID": "6a014b7f-ad2a-45dd-9079-e7eb36031ce5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "547ff092-76d1-4dc7-9e98-8a861dae836e",
                  "parentUUID": "6a014b7f-ad2a-45dd-9079-e7eb36031ce5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.addExpense);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "03cc0281-2121-4dd5-804a-aad4b773fe96",
                  "parentUUID": "6a014b7f-ad2a-45dd-9079-e7eb36031ce5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(createExpenseRequest);\nexpect(response.body.errors[0].message).to.equal(\"Not authenticated\");",
                  "err": {},
                  "uuid": "b6bd8ea3-94f0-4f7e-8a87-5bbe478be111",
                  "parentUUID": "6a014b7f-ad2a-45dd-9079-e7eb36031ce5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve registrar uma despesa com sucesso",
                  "fullTitle": "Expense External - GraphQL addExpense Mutation Deve registrar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(createExpenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/createExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body.data.addExpense)\n  .excluding([\"date\", \"id\"])\n  .to.deep.equal(expectedResponse.data.addExpense);\nexpenseId = response.body.data.addExpense.id;",
                  "err": {},
                  "uuid": "7aa49dd8-e274-4175-869c-5850d54c41fb",
                  "parentUUID": "6a014b7f-ad2a-45dd-9079-e7eb36031ce5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b09669c-8855-4149-b6c6-e7c64a0de1cd",
                "547ff092-76d1-4dc7-9e98-8a861dae836e",
                "03cc0281-2121-4dd5-804a-aad4b773fe96",
                "b6bd8ea3-94f0-4f7e-8a87-5bbe478be111",
                "7aa49dd8-e274-4175-869c-5850d54c41fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ca455a4c-d22a-4c3e-ae2b-922d3bbc1785",
              "title": "editExpense mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "file": "/test/graphql/external/expense/expenseExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando a descrição não for informada",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve retornar erro quando a descrição não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "28f105bc-cea3-402e-b125-30af1ba37439",
                  "parentUUID": "ca455a4c-d22a-4c3e-ae2b-922d3bbc1785",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "a8aa9e07-b6cb-40bc-a5ce-4ab2197a521e",
                  "parentUUID": "ca455a4c-d22a-4c3e-ae2b-922d3bbc1785",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o valor não for informado",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve retornar erro quando o valor não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e9be70f9-5d2b-4e4a-8e5f-7394b1f79205",
                  "parentUUID": "ca455a4c-d22a-4c3e-ae2b-922d3bbc1785",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a data não for informada",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve retornar erro quando a data não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(test.editExpense);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "4ddee8ab-91dc-4d76-9565-394b6d40552b",
                  "parentUUID": "ca455a4c-d22a-4c3e-ae2b-922d3bbc1785",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve retornar erro quando a edição de uma despesa for feita sem token de autenticação",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Use the dynamically created expense ID\neditExpenseRequest.variables.id = expenseId;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(editExpenseRequest);\nexpect(response.body.errors[0].message).to.equal(\"Not authenticated\");",
                  "err": {},
                  "uuid": "dcaafed8-0b71-42b3-847f-9b78c657c523",
                  "parentUUID": "ca455a4c-d22a-4c3e-ae2b-922d3bbc1785",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar uma despesa com sucesso",
                  "fullTitle": "Expense External - GraphQL editExpense mutation Deve editar uma despesa com sucesso",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Use the dynamically created expense ID\neditExpenseRequest.variables.id = expenseId;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send(editExpenseRequest);\nconst expectedResponse = require(\"../../fixture/responses/expense/editExpenseSuccessfulResponse.json\");\nexpect(response.status).to.equal(expectedResponse.statusCode);\nexpect(response.body.data.editExpense).to.deep.equal(\n  expectedResponse.data.editExpense\n);",
                  "err": {},
                  "uuid": "90b9cd63-d326-4659-a52c-be9b50baef01",
                  "parentUUID": "ca455a4c-d22a-4c3e-ae2b-922d3bbc1785",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28f105bc-cea3-402e-b125-30af1ba37439",
                "a8aa9e07-b6cb-40bc-a5ce-4ab2197a521e",
                "e9be70f9-5d2b-4e4a-8e5f-7394b1f79205",
                "4ddee8ab-91dc-4d76-9565-394b6d40552b",
                "dcaafed8-0b71-42b3-847f-9b78c657c523",
                "90b9cd63-d326-4659-a52c-be9b50baef01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "039bbe24-b344-4e82-8f6d-c2ce511e4c64",
          "title": "User External - GraphQL",
          "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
          "file": "/test/graphql/external/user/userExternal.graphql.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "76b5ff81-8188-47bb-af31-e273cea4123f",
              "title": "register mutation",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
              "file": "/test/graphql/external/user/userExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - GraphQL register mutation Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "da5404c9-f519-472a-8a0f-eb2e51043871",
                  "parentUUID": "76b5ff81-8188-47bb-af31-e273cea4123f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - GraphQL register mutation Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "e45b82af-df9e-456a-8889-ade9b44a30ce",
                  "parentUUID": "76b5ff81-8188-47bb-af31-e273cea4123f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando o usuário já existir",
                  "fullTitle": "User External - GraphQL register mutation Deve retornar erro quando o usuário já existir",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.createUser);\nexpect(response.status).to.equal(test.statusCode);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "7e1d6893-fac7-4697-8e18-8c24e548a176",
                  "parentUUID": "76b5ff81-8188-47bb-af31-e273cea4123f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar usuário com sucesso",
                  "fullTitle": "User External - GraphQL register mutation Deve criar usuário com sucesso",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const username = `user${Math.floor(Math.random() * 100000)}`;\nconst mutation = `mutation { register(username: \\\"${username}\\\", password: \\\"password\\\") { message } }`;\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send({ query: mutation });\nexpect(response.body.data.register.message).to.equal(\n  \"Usuário registrado com sucesso\"\n);",
                  "err": {},
                  "uuid": "e3bfb679-cab6-4557-95e0-11d896cb70ae",
                  "parentUUID": "76b5ff81-8188-47bb-af31-e273cea4123f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da5404c9-f519-472a-8a0f-eb2e51043871",
                "e45b82af-df9e-456a-8889-ade9b44a30ce",
                "7e1d6893-fac7-4697-8e18-8c24e548a176",
                "e3bfb679-cab6-4557-95e0-11d896cb70ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "64b09b47-486b-4e83-9012-448d415f59e2",
              "title": "login query",
              "fullFile": "/home/runner/work/trabalho-final-automacao-api/trabalho-final-automacao-api/test/graphql/external/user/userExternal.graphql.test.js",
              "file": "/test/graphql/external/user/userExternal.graphql.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar erro quando o usuário não for informado",
                  "fullTitle": "User External - GraphQL login query Deve retornar erro quando o usuário não for informado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "5a7db80c-18de-40c5-8b48-899795cae2e7",
                  "parentUUID": "64b09b47-486b-4e83-9012-448d415f59e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando a senha não for informada",
                  "fullTitle": "User External - GraphQL login query Deve retornar erro quando a senha não for informada",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "f078bebe-a975-4338-a731-fe5c2af5483d",
                  "parentUUID": "64b09b47-486b-4e83-9012-448d415f59e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar usuário inexistente",
                  "fullTitle": "User External - GraphQL login query Deve retornar erro quando informar usuário inexistente",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "5c699455-7e94-4c8f-84de-a5fb3dadbafe",
                  "parentUUID": "64b09b47-486b-4e83-9012-448d415f59e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar erro quando informar senha incorreta",
                  "fullTitle": "User External - GraphQL login query Deve retornar erro quando informar senha incorreta",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(test.loginUser);\nexpect(response.body.errors[0].message).to.equal(test.expectedMessage);",
                  "err": {},
                  "uuid": "118c70b1-f3d8-4c26-a451-10f9040bde2c",
                  "parentUUID": "64b09b47-486b-4e83-9012-448d415f59e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar o login com sucesso",
                  "fullTitle": "User External - GraphQL login query Deve realizar o login com sucesso",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const loginRequest = require(\"../../fixture/requests/user/loginRequest.json\");\nconst response = await request(process.env.BASE_URL_GRAPHQL)\n  .post(\"/\")\n  .send(loginRequest);\nexpect(response.body.data.login.token).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "d7e36b63-da2b-4ab8-81ba-05df339abf04",
                  "parentUUID": "64b09b47-486b-4e83-9012-448d415f59e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a7db80c-18de-40c5-8b48-899795cae2e7",
                "f078bebe-a975-4338-a731-fe5c2af5483d",
                "5c699455-7e94-4c8f-84de-a5fb3dadbafe",
                "118c70b1-f3d8-4c26-a451-10f9040bde2c",
                "d7e36b63-da2b-4ab8-81ba-05df339abf04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}